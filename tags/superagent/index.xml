<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>superagent on A Place for Poor Examples</title>
    <link>https://blog.mattblair.co/tags/superagent/</link>
    <description>Recent content in superagent on A Place for Poor Examples</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Oct 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mattblair.co/tags/superagent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Superagent/Request Memory Leaks</title>
      <link>https://blog.mattblair.co/blog/20161017-superagent-request-memory-leaks/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mattblair.co/blog/20161017-superagent-request-memory-leaks/</guid>
      <description>Superagent/Request Memory Leaks The last several weeks Thomas Hunter and myself have spent some of our nights and weekends trying to track down memory leaks in an API we both work on.
We were seeing a distinct pattern, that when the API was put under a certain amount of load, that we would start slowly bleeding memory.
We&amp;rsquo;ve found three results:
  Superagent, when put under a certain threshold of load and then connections timeout, can leak memory.</description>
    </item>
    
  </channel>
</rss>
