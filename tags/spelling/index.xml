<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spelling on A Place for Poor Examples</title>
    <link>https://blog.mattblair.co/tags/spelling/</link>
    <description>Recent content in Spelling on A Place for Poor Examples</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 01 Sep 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mattblair.co/tags/spelling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cracking the Coding Interview - JavaScript Trie</title>
      <link>https://blog.mattblair.co/blog/20120901-cracking-the-coding-interview-javascript-trie/</link>
      <pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120901-cracking-the-coding-interview-javascript-trie/</guid>
      <description>&lt;p&gt;I finished my third algorithm from &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt;Â - the &lt;a href=&#34;http://en.wikipedia.org/wiki/Trie&#34;&gt;Trie&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Tries are a useful algorithm, if not all that well known. They can be used for efficient spell checking, auto suggestion, as well as the sorting of a collection of strings.&lt;/p&gt;&#xA;&lt;p&gt;This algorithm was more complex to implement than the &lt;a href=&#34;https://blog.mattblair.co/posts/20120824-cracking-the-coding-interview-javascript-singly-linked-list&#34;&gt;Linked List&lt;/a&gt;, but a little simpler than the &lt;a href=&#34;https://blog.mattblair.co/posts/20120829-cracking-the-coding-interview-javascript-minmax-binary-heap&#34;&gt;Max/Min Binary Heap&lt;/a&gt; to implement.&lt;/p&gt;&#xA;&lt;p&gt;The trie&amp;rsquo;s structure is easy to understand - it&amp;rsquo;s a word tree, where each leaf of the tree is a letter of a word. Where words share common prefixes (such as &lt;strong&gt;fre&lt;/strong&gt;sh and &lt;strong&gt;fre&lt;/strong&gt;edom), those words share a common &amp;ldquo;branch&amp;rdquo; of prefix letters, and split where the words differ.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
