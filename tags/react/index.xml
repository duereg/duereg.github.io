<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on A Place for Poor Examples</title>
    <link>https://blog.mattblair.co/tags/react/</link>
    <description>Recent content in React on A Place for Poor Examples</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Oct 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mattblair.co/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>express-coffee-react-views</title>
      <link>https://blog.mattblair.co/blog/20141008-express-coffee-react-views/</link>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mattblair.co/blog/20141008-express-coffee-react-views/</guid>
      <description>This is an Express view engine which renders React components written in CoffeeScript on the server. It renders static markup and does not support mounting those views on the client.
This was derived from express-react-views
This is intended to be used as a replacement for existing server-side view solutions, like jade, ejs, or handlebars.
Usage npm install express-coffee-react-views react Note: You must explicitly install react as a dependency. react is a peer dependency here.</description>
    </item>
    
    <item>
      <title>React and the annoyances of JSX</title>
      <link>https://blog.mattblair.co/blog/20140909-react-jsx-class-classname-for-htmlfor/</link>
      <pubDate>Tue, 09 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mattblair.co/blog/20140909-react-jsx-class-classname-for-htmlfor/</guid>
      <description>I&amp;rsquo;ve been writing a bunch of React code and a heap of JSX at work.
React (coupled with Flux) has been a joy to work with. The uni-directional data flow makes understanding the state of your application at any point easy to understand. The gradual componentization of our UI codebase is a beautiful thing to witness. That, coupled with a component based CSS system (using BEM guidelines for naming classes) has removed the messy bleed over we were having with some of our old css code.</description>
    </item>
    
  </channel>
</rss>
