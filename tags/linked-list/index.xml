<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linked List on A Place for Poor Examples</title>
    <link>https://blog.mattblair.co/tags/linked-list/</link>
    <description>Recent content in Linked List on A Place for Poor Examples</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Sep 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mattblair.co/tags/linked-list/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cracking the Coding Interview - Linked Lists - The Runner Technique</title>
      <link>https://blog.mattblair.co/blog/20120913-cracking-the-coding-interview-linked-list-the-runner-technique/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120913-cracking-the-coding-interview-linked-list-the-runner-technique/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been going over the &lt;a href=&#34;http://en.wikipedia.org/wiki/Linked_list#Singly.2C_doubly.2C_and_multiply_linked_lists&#34;&gt;Linked List&lt;/a&gt; section of &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; and most times I get stumped with a problem the solution is the Runner Technique (or slow/fast pointers).&lt;/p&gt;&#xA;&lt;p&gt;The idea behind the runner technique is simple; use two pointers that either move at different speeds or are a set distance apart and iterate through a list.&lt;/p&gt;&#xA;&lt;p&gt;Why is this so useful? In some linked list problems you need to know the position of a certain element or the length of the list. Given that you don&amp;rsquo;t always have the length of the list you are working on, the runner technique is an elegant way to solve these type of problems (and in some cases it is the only solution). Here are some examples of linked list problems where the runner technique provides an optimal solution:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cracking the Coding Interview - JavaScript Singly Linked List</title>
      <link>https://blog.mattblair.co/blog/20120824-cracking-the-coding-interview-javascript-singly-linked-list/</link>
      <pubDate>Fri, 24 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120824-cracking-the-coding-interview-javascript-singly-linked-list/</guid>
      <description>&lt;p&gt;I finished my first algorithm from &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; - the almighty &lt;a href=&#34;http://en.wikipedia.org/wiki/Linked_list#Singly.2C_doubly.2C_and_multiply_linked_lists&#34;&gt;Singly Linked List&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This is the low-hanging fruit of the data structures I mean to tackle. Even implementing this simple structure, I managed to somehow squeeze in a bug that luckily I caught in my testing. An unfortunate case of premature optimization.&lt;/p&gt;&#xA;&lt;p&gt;The code doesn&amp;rsquo;t look as cool as it did, but at least it does the job. One thing I found in reading a bit about Linked Lists on wikipedia, which I had never heard of before; Hash Linking.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
