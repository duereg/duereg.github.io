<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>max heap on A Place for Poor Examples</title>
    <link>https://blog.mattblair.co/tags/max-heap/</link>
    <description>Recent content in max heap on A Place for Poor Examples</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Aug 2012 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://blog.mattblair.co/tags/max-heap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cracking the Coding Interview - JavaScript Min/Max Binary Heap</title>
      <link>https://blog.mattblair.co/blog/20120829-cracking-the-coding-interview-javascript-minmax-binary-heap/</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 -0700</pubDate>
      
      <guid>https://blog.mattblair.co/blog/20120829-cracking-the-coding-interview-javascript-minmax-binary-heap/</guid>
      <description>I finished my second algorithm from Cracking the Coding InterviewÂ - the Binary Heap. This algorithm racketed up the complexity from the Linked List.
The heap&amp;rsquo;s structure is easy to understand - it&amp;rsquo;s a binary tree (a tree where each node can have at most two children). In the case of a max heap, the parents have a greater value than their children. The values in a Max Heap decrease as you move down the tree from the parent to children.</description>
    </item>
    
  </channel>
</rss>