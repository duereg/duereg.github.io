<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Don&#39;t expect much on A Place for Poor Examples</title>
    <link>https://blog.mattblair.co/blog/</link>
    <description>Recent content in Don&#39;t expect much on A Place for Poor Examples</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 21 Jun 2024 12:25:15 -0800</lastBuildDate>
    <atom:link href="https://blog.mattblair.co/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting up an on-call roll</title>
      <link>https://blog.mattblair.co/blog/20240621-on-call-triage-role/</link>
      <pubDate>Fri, 21 Jun 2024 12:25:15 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20240621-on-call-triage-role/</guid>
      <description>&lt;h1 id=&#34;structuring-an-on-call-rotation-a-guide-for-engineering-managers&#34;&gt;Structuring an On-Call Rotation: A Guide for Engineering Managers&lt;/h1&gt;&#xA;&lt;p&gt;On-call rotations are more than “who picks up the phone”—they’re a critical way to balance incident response, customer support, and operational health without burning out your team. Below is a template you can adapt, illustrated with examples from my time leading a device-management on-call rotation at a fast-growing tech company.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-define-a-clear-primary-on-call-role&#34;&gt;1. Define a Clear Primary On-Call Role&lt;/h2&gt;&#xA;&lt;p&gt;Rather than vague “points,” &lt;strong&gt;be explicit about the time commitment&lt;/strong&gt; you expect each engineer to spend on-call:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Refactoring a Legacy Codebase</title>
      <link>https://blog.mattblair.co/blog/20240305-refactoring-a-legacy-codebase/</link>
      <pubDate>Tue, 05 Mar 2024 11:52:59 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20240305-refactoring-a-legacy-codebase/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;In my current role, I inherited an older codebase where best practices were often overlooked. As I reviewed the code and the surrounding processes, I found numerous areas for improvement in both code quality and operational practices.&lt;/p&gt;&#xA;&lt;h2 id=&#34;where-to-start&#34;&gt;Where to Start?&lt;/h2&gt;&#xA;&lt;p&gt;When tackling a project like this, I find it best to break down the necessary changes into four categories:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Immediate Changes&lt;/li&gt;&#xA;&lt;li&gt;Short-Term Changes&lt;/li&gt;&#xA;&lt;li&gt;Medium-Term Changes&lt;/li&gt;&#xA;&lt;li&gt;Long-Term Changes&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;immediate-changes&#34;&gt;Immediate Changes&lt;/h2&gt;&#xA;&lt;p&gt;Stack Overflow used to offer a list of concrete practices that engineering companies should follow. These include specific technical and operational practices, such as:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decoding the Origins of CAN Reports</title>
      <link>https://blog.mattblair.co/blog/20230907-can-reports/</link>
      <pubDate>Thu, 07 Sep 2023 15:22:57 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230907-can-reports/</guid>
      <description>&lt;p&gt;In the realm of incident management, accurate and swift communication is vital. Different organizations adopt various strategies to ensure efficient communication during emergencies. One such strategy that has been gaining traction is the utilization of CAN reports, a mnemonic that stands for “Conditions, Actions, Needs.” Let us delve deeper into the intricacies and origins of this unique reporting format.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-can-report&#34;&gt;What is a CAN Report?&lt;/h2&gt;&#xA;&lt;p&gt;A CAN report, fundamentally, serves as a structure to relay critical information succinctly during an incident. It breaks down the report into three primary segments:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strategic Approaches for Technical Improvement</title>
      <link>https://blog.mattblair.co/blog/20230508-tech-improvement-roadmap/</link>
      <pubDate>Sun, 07 May 2023 12:19:57 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230508-tech-improvement-roadmap/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Technical debt is a common challenge faced by engineering teams, requiring deliberate efforts to manage and pay it down. In this blog post, we will explore different approaches to tackling technical debt and building a long-term technical strategy. We will also highlight the importance of involving senior individual contributors (ICs) and engineering managers (EMs) in shaping the strategy, while considering the alignment with business and product goals.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Engaging Senior ICs and EMs in Technical Strategy&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;To ensure a comprehensive technical strategy, it is essential to involve experienced ICs and EMs in the decision-making process. This engagement helps leverage their expertise and insights while creating a collective vision for the engineering function. The strategy-setting process can involve quarterly planning sessions, where EMs and tech leads define the engineering priorities, with input from ICs. This approach enables a bottom-up approach, empowering the team to contribute their perspectives.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crunch Time</title>
      <link>https://blog.mattblair.co/blog/20230404-crunch-time/</link>
      <pubDate>Tue, 04 Apr 2023 03:10:07 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230404-crunch-time/</guid>
      <description>&lt;p&gt;Crunch periods are a reality in many industries, and sometimes they are necessary to meet an immovable deadline. However, working under high-pressure situations for an extended period can lead to burnout, and it&amp;rsquo;s essential to provide support for the team after the crunch is over. In this blog post, we will discuss different approaches for formalized recovery time after a crunch period.&lt;/p&gt;&#xA;&lt;h3 id=&#34;ask-team-members-what-would-make-them-feel-valued&#34;&gt;Ask team members what would make them feel valued&lt;/h3&gt;&#xA;&lt;p&gt;One approach is to ask team members what would make them feel valued after the crunch period. It could be anything from time off to a dinner paid for by the company for them and their family. By listening to their needs and responding accordingly, you show that you care about their well-being and appreciate their hard work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Improving Software Quality</title>
      <link>https://blog.mattblair.co/blog/20230327-code-quality/</link>
      <pubDate>Mon, 27 Mar 2023 10:54:47 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230327-code-quality/</guid>
      <description>&lt;p&gt;As a manager, you&amp;rsquo;re responsible for ensuring that the software your team creates is of the highest quality possible. This means reducing the number of bugs and improving code quality. But how do you measure these improvements? And what strategies can you implement to achieve them?&lt;/p&gt;&#xA;&lt;h2 id=&#34;measuring-quality&#34;&gt;Measuring Quality&lt;/h2&gt;&#xA;&lt;p&gt;One traditional way of measuring quality is by the number of bugs that are found and fixed. However, this is a lagging metric, meaning that you can only measure it after the damage has been done. Instead, leading metrics can be used to predict the quality of the software before any bugs are found. Two examples of leading metrics are code quality and test coverage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moving Between Tech Stacks</title>
      <link>https://blog.mattblair.co/blog/20230302-changing-stacks/</link>
      <pubDate>Thu, 02 Mar 2023 17:31:07 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230302-changing-stacks/</guid>
      <description>&lt;p&gt;When it comes to software engineering roles, experience in the tech stack you&amp;rsquo;re going to be working in is valuable but not specifically required. A good engineer can ramp up and learn new stacks. However, someone experienced in the tech stack can contribute quickly to key development initiatives, while also bringing outside experience using the stack.&lt;/p&gt;&#xA;&lt;p&gt;But which tech stacks are easier to move between, and which ones are the hardest? In my experience, when I’ve transitioned from one stack to another, it took a little while to get my footing. But if you already have experience, you can share that experience to up-level the team.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Promoting Technical Excellence in your Organization</title>
      <link>https://blog.mattblair.co/blog/20230221-technical-excellence/</link>
      <pubDate>Tue, 21 Feb 2023 17:31:07 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230221-technical-excellence/</guid>
      <description>&lt;p&gt;I was speaking to a friend who works at a startup with a team of around 14 engineers. 80% of them are mid level engineers with 3-4 years of experience. They all work in product squads covering specific areas.&lt;/p&gt;&#xA;&lt;p&gt;These have lost momentum in the development and they are seeing 2 key problems:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The teams lacks direction on where to focus their energy and prefer tackling small issues as they don&amp;rsquo;t have a vision as to what impactful engineering initiatives to do.&lt;/li&gt;&#xA;&lt;li&gt;They are struggling to find time to work on technical debt. There is a perception that they should be working on Product work all the time.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;She had originally proposed two solutions, but wanted to hear my thoughts:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interesting Articles for Engineering Managers</title>
      <link>https://blog.mattblair.co/blog/20230201-link-dump/</link>
      <pubDate>Wed, 01 Feb 2023 12:53:42 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230201-link-dump/</guid>
      <description>&lt;h2 id=&#34;engineering-leadership-principles&#34;&gt;Engineering Leadership Principles&lt;/h2&gt;&#xA;&lt;p&gt;The article &amp;ldquo;&lt;a href=&#34;https://hugodias.substack.com/p/engineering-leadership-principles&#34;&gt;Engineering Leadership Principles&lt;/a&gt;&amp;rdquo; by Hugo Dias outlines six principles that he believes are crucial for effective engineering leadership:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Build trust through transparency and communication&lt;/li&gt;&#xA;&lt;li&gt;Foster a culture of learning and growth&lt;/li&gt;&#xA;&lt;li&gt;Prioritize quality and reliability&lt;/li&gt;&#xA;&lt;li&gt;Lead with empathy and emotional intelligence&lt;/li&gt;&#xA;&lt;li&gt;Build strong, diverse teams&lt;/li&gt;&#xA;&lt;li&gt;Empower your team to take ownership and make decisions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Dias provides examples and anecdotes to illustrate each principle and explains why they are important. He also notes that while these principles are essential for engineering leadership, they can also be applied to leadership in other industries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mentorship Proposal</title>
      <link>https://blog.mattblair.co/blog/20230131-mentorship-proposal/</link>
      <pubDate>Tue, 31 Jan 2023 15:30:12 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20230131-mentorship-proposal/</guid>
      <description>&lt;p&gt;Note: This is a proposal I put together with one of the engineers in my organization for a peer-directed mentorship program. I&amp;rsquo;ve removed names and fudged numbers but I hope it will serve as a valuable template. All other numbers quoted here are from outside studies, with links to the studies provided.&lt;/p&gt;&#xA;&lt;h1 id=&#34;peer-mentorship-proposal&#34;&gt;Peer Mentorship Proposal&lt;/h1&gt;&#xA;&lt;p&gt;The most valuable asset of a company are its employees.&lt;/p&gt;&#xA;&lt;p&gt;Among &lt;a href=&#34;https://www2.deloitte.com/global/en/pages/about-deloitte/articles/millennialsurvey.html#info&#34;&gt;top reasons for millennials&lt;/a&gt; wanting to quit their jobs are &amp;lsquo;Not enough opportunities to advance&amp;rsquo; at 35% and &amp;lsquo;Lack of learning and development opportunities&amp;rsquo; at 28%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Technical State of the Team - Expanded</title>
      <link>https://blog.mattblair.co/blog/20221212-technical-state-of-team-expanded/</link>
      <pubDate>Mon, 12 Dec 2022 12:12:12 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20221212-technical-state-of-team-expanded/</guid>
      <description>&lt;p&gt;Note: This is a compliment to the previous article I wrote about the &lt;a href=&#34;http://blog.mattblair.co/blog/20210110-measurable-technical-state-of-the-team/&#34;&gt;Technical state of a Team&lt;/a&gt;, and explains the concepts in depth.&lt;/p&gt;&#xA;&lt;h1 id=&#34;technical-state-of-the-team&#34;&gt;Technical State of the Team&lt;/h1&gt;&#xA;&lt;p&gt;There’s a saying that people don’t leave companies, they leave managers. Management is a key part of any organization, yet the discipline is often self-taught and unstructured. Getting to the good solutions for complex management challenges can make the difference between fulfillment and frustration for teams, and, ultimately, between the success and failure of companies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Project Planning Checklist</title>
      <link>https://blog.mattblair.co/blog/20221110-project-planning-checklist/</link>
      <pubDate>Thu, 10 Nov 2022 05:17:17 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20221110-project-planning-checklist/</guid>
      <description>&lt;p&gt;All the previous project planning articles summarized into a checklist.&lt;/p&gt;&#xA;&lt;h3&gt;Project Planning Checklist&lt;/h3&gt;&#xA;&lt;h4&gt;Pre-Planning&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Identity your stakeholders&lt;/li&gt;&#xA;&lt;li&gt;Identity the goal you’re trying to accomplish&lt;/li&gt;&#xA;&lt;li&gt;Get familiar with the code&lt;/li&gt;&#xA;&lt;li&gt;Set up a local environment to try things out&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4&gt;Beginning to Plan&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Identify the rough scope of the work&lt;/li&gt;&#xA;&lt;li&gt;Identify the milestones of the project&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4&gt;Project Kickoff&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;High-Level Timelines&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Call out timelines you haven’t figured out yet, and when you will figure them out&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Identify Roles and Responsibilities of people involved with the project&lt;/li&gt;&#xA;&lt;li&gt;Identify Dependencies on other teams&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Lay out the requirements for what you need from others to be successful&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Identify Goals and Outcomes for the project&lt;/li&gt;&#xA;&lt;li&gt;Identify how you want people to work together on the project&lt;/li&gt;&#xA;&lt;li&gt;Identify next steps after the kickoff is complete&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4&gt;Overall Technical Design&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;An overview of the problem&lt;/li&gt;&#xA;&lt;li&gt;A breakdown of the individual milestones and how they’re related&lt;/li&gt;&#xA;&lt;li&gt;High-level process / workflow diagrams / designs / etc&lt;/li&gt;&#xA;&lt;li&gt;Any other notes that might be relevant to folks who will be working on the project&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4&gt;Breaking Down the Project into Milestones&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Are the milestones clear on what they’re delivering?&lt;/li&gt;&#xA;&lt;li&gt;Do you have a plan for communicating updates and setbacks?&lt;/li&gt;&#xA;&lt;li&gt;Do you have time for writing/reviewing milestone specific tech specs?&lt;/li&gt;&#xA;&lt;li&gt;Do you have time devoted to metrics / data / monitoring what you built?&lt;/li&gt;&#xA;&lt;li&gt;Do you have time devoted to testing?&lt;/li&gt;&#xA;&lt;li&gt;Do you have time devoted to paying down tech debt in the area you’re working on?&lt;/li&gt;&#xA;&lt;li&gt;Do you have a sign-off process?&lt;/li&gt;&#xA;&lt;li&gt;Did you add time for fast-follow work?&lt;/li&gt;&#xA;&lt;li&gt;Does your milestone fit into your overall timeline?&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Running Your Projects</title>
      <link>https://blog.mattblair.co/blog/20221008-running-your-project/</link>
      <pubDate>Sat, 08 Oct 2022 05:17:17 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20221008-running-your-project/</guid>
      <description>&lt;p&gt;Note: This is a series of project planning talks I gave my team.&lt;/p&gt;&#xA;&lt;h3&gt;Running your project&lt;/h3&gt;&#xA;&lt;h4&gt;Writing A Technical Design Document&lt;/h4&gt;&#xA;&lt;p&gt;At this point, you’re ready to start designing your system.&lt;/p&gt;&#xA;&lt;p&gt;A good technical design document should contain:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;An overview of the problem&lt;/li&gt;&#xA;&lt;li&gt;A breakdown of the individual milestones and how they’re related&lt;/li&gt;&#xA;&lt;li&gt;High-level process / workflow diagrams / designs / etc&lt;/li&gt;&#xA;&lt;li&gt;Any other notes that might be relevant to folks who will be working on the project&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;You should also consider if certain steps can be done in parallel, and what steps block other aspects of the work. Make sure to prioritize blocking steps, and possibly assign parallel work out simultaneously (if staffing permits).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kickoff Doc Expanded</title>
      <link>https://blog.mattblair.co/blog/20220907-kickoff-docs-expanded/</link>
      <pubDate>Wed, 07 Sep 2022 05:17:17 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20220907-kickoff-docs-expanded/</guid>
      <description>&lt;p&gt;Note: this is an expansion on a previous article I wrote around &lt;a href=&#34;http://blog.mattblair.co/blog/20200404-kickoff-docs/&#34;&gt;kickoff docs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3&gt;Project Kickoff!&lt;/h3&gt;&#xA;&lt;p&gt;At this point, you should have a good idea of what your overall goal is. You should have a rough sketch of what your milestones are for the project and what you want to include in each one. You should not have the specific details of the projects worked out yet.&lt;/p&gt;&#xA;&lt;p&gt;It’s time for a project kickoff.&lt;/p&gt;</description>
    </item>
    <item>
      <title>So you’ve got yourself a project</title>
      <link>https://blog.mattblair.co/blog/20220806-so-you-have-project/</link>
      <pubDate>Sat, 06 Aug 2022 05:17:17 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20220806-so-you-have-project/</guid>
      <description>&lt;p&gt;Note: This is a series of project planning talks I gave my team.&lt;/p&gt;&#xA;&lt;h4&gt;So you’ve got yourself a project&lt;/h4&gt;&#xA;&lt;p&gt;A project (and a ticket) is a placeholder for a conversation. No matter if a ticket is super detailed or vague on what it wants, the best way to do good work is to figure out a few things about the work you’ve been given.&lt;/p&gt;&#xA;&lt;h4&gt;Get Comfortable&lt;/h4&gt;&#xA;&lt;p&gt;Pre-planning for any project should begin FAR before the actual work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When to plan a project</title>
      <link>https://blog.mattblair.co/blog/20220705-project-planning-overview/</link>
      <pubDate>Tue, 05 Jul 2022 05:17:17 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20220705-project-planning-overview/</guid>
      <description>&lt;p&gt;Note: This is a series of project planning talks I gave my team.&lt;/p&gt;&#xA;&lt;h1 id=&#34;when-to-plan-a-project&#34;&gt;When to plan a project&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-is-a-project-plan&#34;&gt;What is a project plan?&lt;/h2&gt;&#xA;&lt;p&gt;Project planning is the process of defining your objectives and scope, your goals and milestones (deliverables), and assigning tasks and resources for each step. A good plan is easily shareable with everyone involved, and it’s most useful when it’s revisited regularly. Simply outlining a plan and never discussing it with your team again is a good recipe for wasted time and effort.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Define your team&#39;s stragetic intent</title>
      <link>https://blog.mattblair.co/blog/20220628-strategic-intent/</link>
      <pubDate>Tue, 28 Jun 2022 21:30:12 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20220628-strategic-intent/</guid>
      <description>&lt;p&gt;Note: This was a series of talks I gave to leadership in my organization, so some of the comments here might not make sense in the context of a blog post.&lt;/p&gt;&#xA;&lt;p&gt;This is not original work: I pulled heavilty from these four books to put together these talks:&lt;/p&gt;&#xA;&lt;p&gt;References:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3sb9E6A&#34;&gt;High Output Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3S9NR9S&#34;&gt;The First 90 Days&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3s7wGLt&#34;&gt;An Elegant Puzzle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3MJ99tM&#34;&gt;A Manager’s Path&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If I did not site some of these works here, or pulled quotes directly from them, forgive me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with your Team: Organize to Learn</title>
      <link>https://blog.mattblair.co/blog/20220325-organize-to-learn/</link>
      <pubDate>Fri, 25 Mar 2022 18:37:09 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20220325-organize-to-learn/</guid>
      <description>&lt;p&gt;Note: This was a series of talks I gave to leadership in my organization, so some of the comments here might not make sense in the context of a blog post.&lt;/p&gt;&#xA;&lt;p&gt;This is not original work: I pulled heavilty from these four books to put together these talks:&lt;/p&gt;&#xA;&lt;p&gt;References:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3sb9E6A&#34;&gt;High Output Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3S9NR9S&#34;&gt;The First 90 Days&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3s7wGLt&#34;&gt;An Elegant Puzzle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3MJ99tM&#34;&gt;A Manager’s Path&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If I did not site some of these works here, or pulled quotes directly from them, forgive me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Managerial Meddling</title>
      <link>https://blog.mattblair.co/blog/20211222-managerial-meddling/</link>
      <pubDate>Wed, 22 Dec 2021 15:34:06 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20211222-managerial-meddling/</guid>
      <description>&lt;p&gt;Note: This was a series of talks I gave to leadership in my organization, so some of the comments here might not make sense in the context of a blog post.&lt;/p&gt;&#xA;&lt;p&gt;This is not original work: I pulled heavilty from these four books to put together these talks:&lt;/p&gt;&#xA;&lt;p&gt;References:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3sb9E6A&#34;&gt;High Output Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3S9NR9S&#34;&gt;The First 90 Days&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3s7wGLt&#34;&gt;An Elegant Puzzle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3MJ99tM&#34;&gt;A Manager’s Path&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If I did not site some of these works here, or pulled quotes directly from them, forgive me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is a manager?</title>
      <link>https://blog.mattblair.co/blog/20210919-what-is-a-manager/</link>
      <pubDate>Sun, 19 Sep 2021 12:31:03 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20210919-what-is-a-manager/</guid>
      <description>&lt;p&gt;Note: This was a series of talks I gave to leadership in my organization, so some of the comments here might not make sense in the context of a blog post.&lt;/p&gt;&#xA;&lt;p&gt;This is not original work: I pulled heavilty from these four books to put together these talks:&lt;/p&gt;&#xA;&lt;p&gt;References:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3sb9E6A&#34;&gt;High Output Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3S9NR9S&#34;&gt;The First 90 Days&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3s7wGLt&#34;&gt;An Elegant Puzzle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://amzn.to/3MJ99tM&#34;&gt;A Manager’s Path&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If I did not site some of these works here, or pulled quotes directly from them, forgive me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SMART vs CLEAR goals</title>
      <link>https://blog.mattblair.co/blog/20210627-smart-vs-clear/</link>
      <pubDate>Sun, 27 Jun 2021 09:39:00 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20210627-smart-vs-clear/</guid>
      <description>&lt;h4&gt;Setting Goals&lt;/h4&gt;&#xA;&lt;p&gt;Two of the more popular methods for setting goals are SMART and CLEAR:&lt;/p&gt;&#xA;&lt;h5&gt;SMART Goals&lt;/h5&gt;&#xA;&lt;p&gt;This method helps ensure that the goals have been thoroughly vetted. It also provides a way to clearly understand the implications of the goal-setting process.&lt;/p&gt;&#xA;&lt;p&gt;Specific – To set specific goals, answer the following questions: who, what, where, when, which, and why.&lt;/p&gt;&#xA;&lt;p&gt;Measurable – Create criteria that you can use to measure the success of a goal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The schedule of an engineering manager</title>
      <link>https://blog.mattblair.co/blog/20210516-weekly-tasks/</link>
      <pubDate>Sun, 16 May 2021 09:39:00 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20210516-weekly-tasks/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;In re-reading &lt;a href=&#34;https://amzn.to/3Dw1oUF&#34;&gt;High Output Management&lt;/a&gt; recently, I was particularly interested in reading over Andy Grove&amp;rsquo;s schedule and seeing how he spent his time. I thought it might be interesting to post something similar to how I allocate my time throughout the year.&lt;/p&gt;&#xA;&lt;h2 id=&#34;regular-occurring-events&#34;&gt;Regular Occurring Events:&lt;/h2&gt;&#xA;&lt;p&gt;Weekly 1:1’s with all direct reports&#xA;Weekly 1:1’s with PM, Design, etc&#xA;Weekly 1:1&amp;rsquo;s with my manager&#xA;Weekly leadership meeting with pillar leadership&#xA;Bi-weekly 1:1’s with peers&#xA;Monthly Career Conversations with direct reports&lt;/p&gt;</description>
    </item>
    <item>
      <title>Breakdown; post-mortem of a process failure</title>
      <link>https://blog.mattblair.co/blog/20210217-incident-remediation/</link>
      <pubDate>Wed, 17 Feb 2021 18:49:50 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20210217-incident-remediation/</guid>
      <description>&lt;p&gt;I was reviewing an old incident review doc where I wrote up some of the high level learnings from the incident. Thought it was worth sharing, with the details omitted to protect the innocent.&lt;/p&gt;&#xA;&lt;p&gt;Some backstory; we were trying to load test a component and ended up getting the load testing done at the last minute right before customer launch. The team had to work into the weekend to meet the customer deadline.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Measure the Technical State of your Team</title>
      <link>https://blog.mattblair.co/blog/20210110-measurable-technical-state-of-the-team/</link>
      <pubDate>Sun, 10 Jan 2021 21:40:42 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20210110-measurable-technical-state-of-the-team/</guid>
      <description>&lt;p&gt;Some thoughts on how you could evaluate the state of the systems your team owns.&lt;/p&gt;&#xA;&lt;p&gt;One way to use this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Put some of these criteria on the Y axis&lt;/li&gt;&#xA;&lt;li&gt;Put the name of the components you own on the X.&lt;/li&gt;&#xA;&lt;li&gt;Give everything a score from 1 to 0.&lt;/li&gt;&#xA;&lt;li&gt;Either average the scores or sum them to figure out which components need the most love.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If all of these are the same for everything you own, it might make sense to skip that section. For example, if you own 10 services, but they all use a common build pipeline that you don&amp;rsquo;t maintain, it might make sense to skip that criteria.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Velocity in Development Teams</title>
      <link>https://blog.mattblair.co/blog/20201102-understanding-velocity-in-development-teams/</link>
      <pubDate>Mon, 02 Nov 2020 17:31:07 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20201102-understanding-velocity-in-development-teams/</guid>
      <description>&lt;p&gt;Velocity is a commonly used metric in development teams to measure how much work they can fit into a sprint. However, using velocity for any other purpose can be problematic as it might not reflect the real progress of the project and can be a flawed planning mechanism.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s crucial to understand that each team defines what a point means for them, making velocity not useful for comparing teams with each other. Each team can track their own velocity to have a better gauge of their progress and how much they can fit into a sprint. Teams should be self-organizing, and how they want to track velocity is up to them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The importance of clear communication</title>
      <link>https://blog.mattblair.co/blog/20200909-pyramid-principle-inaction/</link>
      <pubDate>Wed, 09 Sep 2020 15:20:08 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20200909-pyramid-principle-inaction/</guid>
      <description>&lt;p&gt;This is based off a talk I gave on improving communications.&lt;/p&gt;&#xA;&lt;h2 id=&#34;there-is-a-lot-of-communication-right-now&#34;&gt;There is a lot of communication right now&lt;/h2&gt;&#xA;&lt;p&gt;With everyone working remotely, the importance of communication has increased. We&amp;rsquo;re communicating more often without meeting, and making your message clear when everyone is deluged with correspondance is the only way to have impact in your organization.&lt;/p&gt;&#xA;&lt;p&gt;To succeed in any organization, you need to be able to tell your story. Whether it’s a status update, an RFC, or an escal question, you need to be able to quickly tell people the state of the world. It’s how you’re going to convince other people to take action or to answer their questions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1:1&#39;s aren&#39;t enough in a SIP world</title>
      <link>https://blog.mattblair.co/blog/20200606-remote-management-lessons-learned/</link>
      <pubDate>Mon, 08 Jun 2020 13:40:42 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20200606-remote-management-lessons-learned/</guid>
      <description>&lt;p&gt;Back when we were all the office together, it was pretty easy as a manager to get a feel for how the team was doing. Are folks getting along? Are folks stressed? Does everyone have the right balance of work? With folks all around you, it was pretty easy to drop in on a conversation, take someone to lunch, or grab a coffee and talk.&lt;/p&gt;&#xA;&lt;p&gt;These small encounters gave you a chance to make sure your team was running efficiency, it also gave your team a chance to speak to you as a human being outside of formal settings. Usually that level of shared vunerability led to better, more fulfilling conversations in the following 1:1&amp;rsquo;s.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kickoff Docs</title>
      <link>https://blog.mattblair.co/blog/20200404-kickoff-docs/</link>
      <pubDate>Tue, 03 Mar 2020 14:07:39 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20200404-kickoff-docs/</guid>
      <description>&lt;h2 id=&#34;what-is-a-project-kickoff&#34;&gt;What is a Project Kickoff?&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;What is a project kick-off? A project kick-off meeting is the first meeting with the project team and the client of the project where applicable. This meeting is the time to establish common goals and the purpose of the project.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;Taken from the Atlassian &lt;a href=&#34;https://www.atlassian.com/work-management/project-management/project-kickoff&#34;&gt;Project Kickoff&lt;/a&gt; reference.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-a-project-kickoff&#34;&gt;Why a Project Kickoff?&lt;/h2&gt;&#xA;&lt;p&gt;A project kickoff sets a clear outline of project goals and milestones.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a celebration of where you&amp;rsquo;re going as a group. You get your chance to outline what you want to build as a team and why you&amp;rsquo;re doing it. The &lt;em&gt;how&lt;/em&gt; isn&amp;rsquo;t important at this step - either from a management or engineering side. You&amp;rsquo;re just trying to let everyone know where you want to end up once the project is complete.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Measuring Backlog Health</title>
      <link>https://blog.mattblair.co/blog/20200101-measuring-backlog-health/</link>
      <pubDate>Wed, 01 Jan 2020 21:40:42 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20200101-measuring-backlog-health/</guid>
      <description>&lt;h2 id=&#34;backlog-grooming&#34;&gt;Backlog Grooming&lt;/h2&gt;&#xA;&lt;p&gt;Some thoughts on how you could evaluate the state of your backlog.&lt;/p&gt;&#xA;&lt;p&gt;Small, well groomed backlog&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Are the tickets in the backlog going to be actioned in the near term?&lt;/li&gt;&#xA;&lt;li&gt;If you deleted the tickets that aren&amp;rsquo;t in your near-term roadmap, how long would it take you to recreate it?&lt;/li&gt;&#xA;&lt;li&gt;Is the Backlog consistently growing or shrinking?&lt;/li&gt;&#xA;&lt;li&gt;Are the tickets all in a state to be actioned immediately, or do they need additional work?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Ticket &amp;amp; Project Health&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pyramid Principle Examples</title>
      <link>https://blog.mattblair.co/blog/20191111-pyramid-principle-examples/</link>
      <pubDate>Mon, 11 Nov 2019 15:57:32 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20191111-pyramid-principle-examples/</guid>
      <description>&lt;p&gt;I use &lt;a href=&#34;https://www.harrisonmetal.com/library/storytelling-amp-presenting-1-thank-you-barbara-minto&#34;&gt;SCQA&lt;/a&gt; all the time in my communications both up to leadership and down to my teams.&lt;/p&gt;&#xA;&lt;p&gt;This &lt;a href=&#34;http://www.ted.com/talks/derek_sivers_keep_your_goals_to_yourself&#34;&gt;TED talk&lt;/a&gt; from Derek Sivers is a great example of someone using SCQA to communicating a problem and a suggested solution in a short amount of time. Worth watching if you&amp;rsquo;re looking to use SCQA in your own communications.&lt;/p&gt;&#xA;&lt;p&gt;Another example of an SCQA structured communication is something I received at work:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Phishers and scammers are actively targeting employees on LinkedIn and email&#xA;(work and personal) in hopes of accessing valuable information.&#xA;&#xA;Every employee, whether you realize it or not, has insider knowledge -&#xA;it may be access to financial data, technical resources, customer contacts,&#xA;intellectual property, customer data, or other resources –&#xA;and there are people who will try to exploit that.&#xA;&#xA;What can you do?&#xA;Do not click the link, open the attachment, or respond to the sender&#xA;Forward a copy to phishing@company-corp.com&#xA;Use the Spam button in GMail&#xA;If it’s a LinkedIn message, text message, or other non-Company-Corp&#xA;message that feels suspicious, please report it to security&#xA;&#xA;...Additional Evidence...&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Further Engineering Management Classes</title>
      <link>https://blog.mattblair.co/blog/20190607-further-engineering-management-classes/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20190607-further-engineering-management-classes/</guid>
      <description>&lt;p&gt;Some further classes I recommend for potential new engineering managers.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.harrisonmetal.com/library/objectives-key-results&#34;&gt;https://www.harrisonmetal.com/library/objectives-key-results&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;So many companies want to set up goals in the OKR (Objective-Key Result) format. This shows some great examples how to format yours.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.harrisonmetal.com/library/storytelling-amp-presenting-1-thank-you-barbara-minto&#34;&gt;https://www.harrisonmetal.com/library/storytelling-amp-presenting-1-thank-you-barbara-minto&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I use SCQA all the time in my communications both up to leadership and down to my teams. Highly recommend taking this class or reading &lt;a href=&#34;https://www.amazon.com/Pyramid-Principle-Logic-Writing-Thinking/dp/0273710516&#34;&gt;The Pyramid Principle&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.harrisonmetal.com/classes/gm2-setting-goals-measuring-performance&#34;&gt;https://www.harrisonmetal.com/classes/gm2-setting-goals-measuring-performance&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re a manager, you&amp;rsquo;re going to have to figure out a way to set goals for your teams and measure the performance of those goals. This will help.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Project Planning Notes</title>
      <link>https://blog.mattblair.co/blog/20190202-project-planning-notes/</link>
      <pubDate>Fri, 08 Feb 2019 16:29:13 -0800</pubDate>
      <guid>https://blog.mattblair.co/blog/20190202-project-planning-notes/</guid>
      <description>&lt;h2 id=&#34;more-shared-knowledge-on-projects&#34;&gt;More Shared Knowledge on Projects&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Include more people in code reviews even if they&amp;rsquo;re not actively picking up development tasks &amp;ndash; this shares out knowledge of the changes and gets another set of eyes that can ask good questions&lt;/li&gt;&#xA;&lt;li&gt;Break team silos, share knowledge&lt;/li&gt;&#xA;&lt;li&gt;Do Team PR&amp;rsquo;s for big PR&amp;rsquo;s&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ideally break work into small pieces though&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Do team share of projects for tech projects, share knowledge&lt;/li&gt;&#xA;&lt;li&gt;Team Collab!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;metricsmonitoringdata&#34;&gt;Metrics/Monitoring/Data&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Implement monitoring and error visibility to make it easier to debug problems down the road.&lt;/li&gt;&#xA;&lt;li&gt;Data driven approach whenever we can to illustrate impact. This can be something we start collection at the beginning and continue through out the project.&lt;/li&gt;&#xA;&lt;li&gt;implement monitoring &amp;amp; debugging for every milestone, every deliverable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;testing--tech-debt&#34;&gt;Testing &amp;amp; Tech Debt&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Automated testing early in the process&lt;/li&gt;&#xA;&lt;li&gt;Test Plan/Test Matrix up-front&lt;/li&gt;&#xA;&lt;li&gt;Fix broken windows along the way&#xA;&lt;ul&gt;&#xA;&lt;li&gt;broker time for tech debt&lt;/li&gt;&#xA;&lt;li&gt;broker time for related bugs in the backlog&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;status-updatecommunication&#34;&gt;Status Update/Communication&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Constant, detailed, concise status updates in channel &amp;ndash; this is particularly helpful when rolling new people on because you can say &amp;ldquo;please go back and read the content of the channel for the past week&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Frequent check-ins/deliverables&lt;/li&gt;&#xA;&lt;li&gt;Customers/Users to consult with along the way&lt;/li&gt;&#xA;&lt;li&gt;highlight risks early and often&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Clear Communication of Risks, Early &amp;amp; Often&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Roll out plans&lt;/li&gt;&#xA;&lt;li&gt;Disorganization from not knowing what work streams are in progress and who is working on what tasks&lt;/li&gt;&#xA;&lt;li&gt;Clear Status Updates in Channel&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Nice for on-boarding new folks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;clear comms, high vis&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kickoff--milestones&#34;&gt;Kickoff &amp;amp; Milestones&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Clear Milestones&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What is the smallest thing we can deliver to our customers/partners so they can validate our approach?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Clear outline of project goals and milestones, this helps us fall back on the main objective when things get unorganized&lt;/li&gt;&#xA;&lt;li&gt;Kick Off!&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Celebration, where we&amp;rsquo;re going&lt;/li&gt;&#xA;&lt;li&gt;Outline what we want to build&lt;/li&gt;&#xA;&lt;li&gt;Why we&amp;rsquo;re doing it&lt;/li&gt;&#xA;&lt;li&gt;Is how that important?&lt;/li&gt;&#xA;&lt;li&gt;What you&amp;rsquo;re going to do is not that important&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;🎉 Continue celebrating small wins!&lt;/li&gt;&#xA;&lt;li&gt;You need time devoted to design, review, write tech specs&lt;/li&gt;&#xA;&lt;li&gt;You need time for fast-follow work that you uncover along the way&lt;/li&gt;&#xA;&lt;li&gt;Clear Project Goals &amp;amp; Milestones&#xA;&lt;ul&gt;&#xA;&lt;li&gt;when things get disorganized, what to do&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;project-task-tracking-doc&#34;&gt;Project Task Tracking Doc&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Keeping a separate project doc that tracks tasks and stories. It can be a bit of a pain to manage and sometimes is a couple days out of date, but I&amp;rsquo;ve found it very helpful in keeping alignment on the work left to do for a project&lt;/li&gt;&#xA;&lt;li&gt;Take into accounts bugs and broken windows you can fix along the way&lt;/li&gt;&#xA;&lt;li&gt;Don’t be too fine grained on certain tasks&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Things can be rough if clear. You don’t need a page long ticket for a one line change&#xA;Tech Specs / RFCs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Pre-planning for any project should begin much before the actual work&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Getting familiar with code base&lt;/li&gt;&#xA;&lt;li&gt;Setting up environment&lt;/li&gt;&#xA;&lt;li&gt;etc etc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Tech specs or brain storming sessions that involve the entire team in the design process.&lt;/li&gt;&#xA;&lt;li&gt;Create a detailed design doc to iron out the implementation details&#xA;&lt;ul&gt;&#xA;&lt;li&gt;no matter how small the feature/project is&lt;/li&gt;&#xA;&lt;li&gt;take them through the appropriate design reviews&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RFCs&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Full RFC overview right before the official kick-off.&lt;/li&gt;&#xA;&lt;li&gt;could be an engineering focused project where we comb through assumptions and highlight any risks.&lt;/li&gt;&#xA;&lt;li&gt;This might also help with setting original expectations on delivery date&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;swarming&#34;&gt;Swarming&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Full Team Swarming has value&lt;/li&gt;&#xA;&lt;li&gt;Reduce having single developers on projects&lt;/li&gt;&#xA;&lt;li&gt;Attempting to breakdown work or introduce parallelism for projects that were not initially designed that way can cause problems.&lt;/li&gt;&#xA;&lt;li&gt;Figure out in the design phase what work that can be done in parallel (planning for multiple developers)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Manager Conference Links</title>
      <link>https://blog.mattblair.co/blog/20180115-manager-conference-links/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20180115-manager-conference-links/</guid>
      <description>&lt;p&gt;A couple of EM conferences folks might find useful:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sfelc.com/&#34;&gt;SFELC Summit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;An annual celebration for engineering leaders.&lt;/p&gt;&#xA;&lt;p&gt;A wide range of topics. One day, multiple tracks. Great speaker lineup. A refresher on management fundamentals. Workshops and Breakouts.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.calibratesf.com/&#34;&gt;Calibrate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;You’re a great engineer. Become a great leader. Calibrate is aimed at practicing engineering managers, responsible for the people on their team.&lt;/p&gt;&#xA;&lt;p&gt;You can find videos of previous years &lt;a href=&#34;https://www.youtube.com/user/sharethrough/playlists&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.temscon.org/&#34;&gt;TEMSCON&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Research-focused engineering management conference.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElasticSearch Perf - Highlighter Edition</title>
      <link>https://blog.mattblair.co/blog/20181121-elasticsearch-perf-work/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20181121-elasticsearch-perf-work/</guid>
      <description>&lt;p&gt;Wanted to share the results of the work we&amp;rsquo;ve been doing to improve performance and stabilize our ES cluster.&lt;/p&gt;&#xA;&lt;p&gt;Short Version: Changing sharding and &amp;ldquo;highlighting&amp;rdquo; strategies when doing FreeText searches dramatically impacts performance.&lt;/p&gt;&#xA;&lt;p&gt;Long Version: We&amp;rsquo;ve been load testing various aspects of search to pinpoint features we use that create large amounts of load on the system. Our initial research pointed at normal searches and freetext searches as being problematic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moment.js alternatives</title>
      <link>https://blog.mattblair.co/blog/20180908-moment-js-alternatives/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20180908-moment-js-alternatives/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re looking for moment.js alternatives, I&amp;rsquo;d recommend reading &lt;a href=&#34;https://github.com/you-dont-need/You-Dont-Need-Momentjs&#34;&gt;this article&lt;/a&gt; about smaller, lighter-weight moment.js alternatives.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Manager READMEs</title>
      <link>https://blog.mattblair.co/blog/20180601-manager-readme/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20180601-manager-readme/</guid>
      <description>&lt;p&gt;A friend recently introduced me to the ideas of creating a Manager README.&lt;/p&gt;&#xA;&lt;p&gt;The idea is that for coworkers and new team members, you give a rundown of how you like to work and what they can expect.&lt;/p&gt;&#xA;&lt;p&gt;Some of the canonical READMEs that are frequently used as templates can be found &lt;a href=&#34;https://hackernoon.com/12-manager-readmes-from-silicon-valleys-top-tech-companies-26588a660afe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A list of the current READMEs out in the wild (including mine), as well as some links to guides to help write them, can be found &lt;a href=&#34;https://svnk.github.io/manager-READMEs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElasticSearch sharding work</title>
      <link>https://blog.mattblair.co/blog/20180305-elasticsearch-sharding-work/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20180305-elasticsearch-sharding-work/</guid>
      <description>&lt;p&gt;Wanted to share some insights my team has found with changing sharding strategies for ElasticSearch (ES).&lt;/p&gt;&#xA;&lt;p&gt;Today we moved 100% of my work&amp;rsquo;s search and autocomplete queries from a mutli-sharded index to a single-sharded index.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Short version: Reducing shard count reduces system load, CPU usage, mostly positive results on performance.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Medium version: In moving 100% of our searches and autocomplete queries from a mutli-sharded index to a single-sharded index, we saw drops in cluster load, queries generated by ES, and overall ES CPU usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Engineering Management Classes</title>
      <link>https://blog.mattblair.co/blog/20171229-engineering-management-classes/</link>
      <pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20171229-engineering-management-classes/</guid>
      <description>&lt;p&gt;Two classes I recommend for potential new engineering managers.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.harrisonmetal.com/classes/foundations-general-management&#34;&gt;https://www.harrisonmetal.com/classes/foundations-general-management&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The course is designed to help new managers develop foundational skills in management and leadership.&lt;/p&gt;&#xA;&lt;p&gt;The course covers several key topics, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Understanding the role of a manager and developing a management philosophy&lt;/li&gt;&#xA;&lt;li&gt;Building effective teams and managing team dynamics&lt;/li&gt;&#xA;&lt;li&gt;Developing and executing strategy&lt;/li&gt;&#xA;&lt;li&gt;Managing operations and projects&lt;/li&gt;&#xA;&lt;li&gt;Building and managing relationships with stakeholders&lt;/li&gt;&#xA;&lt;li&gt;Leading change and managing transitions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The course is divided into several modules, with each module covering a specific topic. The modules include video lectures, readings, case studies, and exercises to help learners apply the concepts in real-world situations. The course also includes discussion forums and opportunities to connect with other learners to facilitate collaboration and learning. The course covers 3 days, has great teachers, and teaches you basic skills needed to run a small business or team.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElasticSearch Garbage Collection issues?</title>
      <link>https://blog.mattblair.co/blog/20170813-elasticsearch-garbage-collection/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20170813-elasticsearch-garbage-collection/</guid>
      <description>&lt;p&gt;Seeing high garbage collection with ElasticSearch? My team was seeing periodic 300ms+ garbage collection pauses.&#xA;We found out that we had misconfigured our ES instances.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re encountering this, make sure you&amp;rsquo;ve disabled memory swapping:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/5.0/setup-configuration-memory.html&#34;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/5.0/setup-configuration-memory.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moment.js instantiation slowness</title>
      <link>https://blog.mattblair.co/blog/20170504-moment-js-instantiation-slowness/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20170504-moment-js-instantiation-slowness/</guid>
      <description>&lt;p&gt;Was doing some test speedup/performance improvement work recently on the search API and found out something; the moment.js library takes around 100 microseconds (or .1 milliseconds) to create a new instance.&lt;/p&gt;&#xA;&lt;p&gt;Why is 100 microseconds a big deal?&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re processing:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;100 records&lt;/li&gt;&#xA;&lt;li&gt;Where each record has 7 date fields&lt;/li&gt;&#xA;&lt;li&gt;Then you&amp;rsquo;ve created 70,000 microseconds of work&lt;/li&gt;&#xA;&lt;li&gt;Or 70 milliseconds of processing delay.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By doing some memoization of date formatting in our API, we&amp;rsquo;ve seen these performance improvements:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Performance Improvement via node 4 to node 6</title>
      <link>https://blog.mattblair.co/blog/20161109-performance-improvement-via-babel-tranpilation-removal/</link>
      <pubDate>Wed, 09 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20161109-performance-improvement-via-babel-tranpilation-removal/</guid>
      <description>&lt;p&gt;My team at work recently upgraded our codebase to use to node 6.9, as node 6 has recently gone to LTS.&lt;/p&gt;&#xA;&lt;p&gt;In the picture below, the 1st line is the upgrade from node 4 to node 6, and the corresponding flattening of memory usage vs. load.&lt;/p&gt;&#xA;&lt;p&gt;The 2nd line is our removal of redis connection queueing in the application.&lt;/p&gt;&#xA;&lt;p&gt;All of all, the memory consumption of our application is now averaging around 150MB, down from a high of 1GB!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Superagent/Request Memory Leaks</title>
      <link>https://blog.mattblair.co/blog/20161017-superagent-request-memory-leaks/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20161017-superagent-request-memory-leaks/</guid>
      <description>&lt;h2 id=&#34;superagentrequest-memory-leaks&#34;&gt;Superagent/Request Memory Leaks&lt;/h2&gt;&#xA;&lt;p&gt;The last several weeks &lt;a href=&#34;https://thomashunter.name/&#34;&gt;Thomas Hunter&lt;/a&gt; and myself have spent some of our nights and weekends trying to track down memory leaks in an API we both work on.&lt;/p&gt;&#xA;&lt;p&gt;We were seeing a distinct pattern, that when the API was put under a certain amount of load, that we would start slowly bleeding memory.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ve found three results:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/visionmedia/superagent&#34;&gt;Superagent&lt;/a&gt;, when put under a certain threshold of load and then connections timeout, can leak memory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node 4 and Babel 6 in Harmony</title>
      <link>https://blog.mattblair.co/blog/20160116-node-4-and-babel-6/</link>
      <pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20160116-node-4-and-babel-6/</guid>
      <description>&lt;h2 id=&#34;pun-in-title-intentional&#34;&gt;Pun in title intentional&lt;/h2&gt;&#xA;&lt;p&gt;I upgraded a heap of projects I was working on to node 4.2.3 and &lt;a href=&#34;https://blog.mattblair.co/posts/20151231-for-real-upgrade-babel-5-to-6/&#34;&gt;babel 6&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;As I did a quick and dirty upgrade, I kept thinking to myself: doesn&amp;rsquo;t node 4/5 have &lt;a href=&#34;https://nodejs.org/en/docs/es6/#which-features-ship-with-node-js-by-default-no-runtime-flag-required&#34;&gt;pretty good support for es6/2015&lt;/a&gt;?&lt;/p&gt;&#xA;&lt;p&gt;As I was looking around the internet for  &lt;del&gt;Hello Kitty Formalwear&lt;/del&gt;  babel 6 upgrade tips, I came across &lt;a href=&#34;https://github.com/jbach/babel-preset-es2015-node4&#34;&gt;this package which read my mind&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;So if you&amp;rsquo;re a node 4/5 user, by doing this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Guide to upgrading from Babel 5 =&gt; 6</title>
      <link>https://blog.mattblair.co/blog/20151231-for-real-upgrade-babel-5-to-6/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20151231-for-real-upgrade-babel-5-to-6/</guid>
      <description>&lt;h2 id=&#34;because-its-changed-since-october&#34;&gt;Because it&amp;rsquo;s changed since October&lt;/h2&gt;&#xA;&lt;p&gt;There have been a bunch of &lt;a href=&#34;https://medium.com/@malyw/how-to-update-babel-5-x-6-x-d828c230ec53#.kfcq7zxhx&#34;&gt;guides on upgrading to babel 5&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Even those written in the last two months are already out of date. Babel moves annoyingly fast.&lt;/p&gt;&#xA;&lt;p&gt;Please note: this is up to date as of 6.3.13. As I write this, it might also be obsolete.&lt;/p&gt;&#xA;&lt;h3 id=&#34;skip-babel-core-and-babel-loader-user-babel-register&#34;&gt;Skip babel-core and babel-loader. User babel-register.&lt;/h3&gt;&#xA;&lt;p&gt;Due to some complaints about the various ways you could bootstrap babel into an app, there is now &lt;a href=&#34;https://github.com/babel/babel/tree/master/packages/babel-register&#34;&gt;babel-register&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Move your Open Source work to Node 4</title>
      <link>https://blog.mattblair.co/blog/20150910-upgrade-travis-and-os-for-node-4/</link>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20150910-upgrade-travis-and-os-for-node-4/</guid>
      <description>&lt;p&gt;Now that &lt;a href=&#34;https://nodejs.org/en/blog/release/v4.0.0/&#34;&gt;Node 4 has been released&lt;/a&gt;, isn&amp;rsquo;t it time you upgraded your OS (Open Source) projects to use it?&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1---packagejson&#34;&gt;Step 1 - package.json&lt;/h2&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re not already using it, the &lt;a href=&#34;https://docs.npmjs.com/files/package.json#engines&#34;&gt;engines&lt;/a&gt; field in your &lt;code&gt;package.json&lt;/code&gt; allows you to specify what version of node you designed your package to run on. The &lt;code&gt;engines&lt;/code&gt; field is not strict - you can&amp;rsquo;t force your consumers to use a preferred engine, but you can warn them if your package uses features that aren&amp;rsquo;t available in all version of node.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The (0, func) operation in transpiled code</title>
      <link>https://blog.mattblair.co/blog/20150420-0-func-operator-and-decoupling/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20150420-0-func-operator-and-decoupling/</guid>
      <description>&lt;p&gt;Was looking at some decompiled code from ES6 the other day, when I saw a line that looked like this:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var x = (0, anObject.aFunc)(params);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;WTF? I had never seen syntax like this before in JavaScript. Time to dig into the docs.&lt;/p&gt;&#xA;&lt;p&gt;Paraphrasing from Mozilla and StackOverflow:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;When you write expressions separated by a comma (,) JavaScript evaluates all the expressions in order and returns the value of the last expression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replaying changes from one git branch onto another</title>
      <link>https://blog.mattblair.co/blog/20150216-git-rebasing-without-rebasing/</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20150216-git-rebasing-without-rebasing/</guid>
      <description>&lt;h2 id=&#34;or-rebasing-without-rebasing&#34;&gt;Or rebasing without rebasing&lt;/h2&gt;&#xA;&lt;p&gt;Where I work, we use git (like everyone else), and we follow this common pattern for development:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create a feature branch off of master&lt;/li&gt;&#xA;&lt;li&gt;Work on your feature in the branch&lt;/li&gt;&#xA;&lt;li&gt;When getting ready to submit a Pull Request, squash your commits&lt;/li&gt;&#xA;&lt;li&gt;Rebase master against your branch&lt;/li&gt;&#xA;&lt;li&gt;Open PR&lt;/li&gt;&#xA;&lt;li&gt;Get feedback&lt;/li&gt;&#xA;&lt;li&gt;After feedback corrected (if present), merge branch into master&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Pretty standard practice. 99% of the time, this is a frictionless process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code coverage for CoffeeScript and JavaScript without pre-compiling</title>
      <link>https://blog.mattblair.co/blog/20141204-gulp-coffee-istanbul/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20141204-gulp-coffee-istanbul/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re not aware of your code coverage when building a serious application, you&amp;rsquo;re not building a serious app.&lt;/p&gt;&#xA;&lt;p&gt;So I love &lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;istanbul&lt;/a&gt; and &lt;a href=&#34;https://github.com/SBoudrias/gulp-istanbul&#34;&gt;gulp-istanbul&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;One problem - you have to compile your CoffeeScript, then point you tests at the compiled assets to get coverage metrics.&lt;/p&gt;&#xA;&lt;p&gt;Not anymore. Introducing &lt;a href=&#34;https://github.com/duereg/gulp-coffee-istanbul&#34;&gt;gulp-coffee-istanbul&lt;/a&gt;. This allows in place CoffeeScript test coverage.&lt;/p&gt;&#xA;&lt;p&gt;Have tests in coffee? Great. Have tests in JS? Great too. Same with your dependencies - it&amp;rsquo;ll take both, in place, and run coverage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>It took pivotal 3 years to close a pull request</title>
      <link>https://blog.mattblair.co/blog/20141013-jasmine-node-before-all-after-all/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20141013-jasmine-node-before-all-after-all/</guid>
      <description>&lt;p&gt;On Feb 9, 2011, Fat (Jacob Thornton, one of the creators on &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;) opened a &lt;a href=&#34;https://github.com/pivotal/jasmine/pull/56&#34;&gt;pull request&lt;/a&gt; to add beforeAll and afterAll statements to the &lt;a href=&#34;https://github.com/pivotal/jasmine&#34;&gt;jasmine&lt;/a&gt; library.&lt;/p&gt;&#xA;&lt;p&gt;Pivotal, at the time, thought that they were just about to implement:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://cl.ly/64PF/Screen%20shot%202011-04-17%20at%2011.18.55%20PM.png&#34; alt=&#34;Snapshot of a tweet where Pivotal tells @Fat that they’re about to implement beforeAll and afterAll&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;That tweet was from December 2010.&lt;/p&gt;&#xA;&lt;p&gt;Since then, a couple people have come up with &lt;a href=&#34;https://github.com/nonplus/jasmine-beforeAll&#34;&gt;workarounds&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;And now, over three years later, pivotal is about to release &lt;a href=&#34;https://github.com/pivotal/jasmine/pull/56#issuecomment-56873541&#34;&gt;beforeAll/afterAll&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>express-coffee-react-views</title>
      <link>https://blog.mattblair.co/blog/20141008-express-coffee-react-views/</link>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20141008-express-coffee-react-views/</guid>
      <description>&lt;p&gt;This is an &lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt; view engine which renders &lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; components written in &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt; on the server. It renders static markup and &lt;em&gt;does not&lt;/em&gt; support mounting those views on the client.&lt;/p&gt;&#xA;&lt;p&gt;This was derived from &lt;a href=&#34;https://github.com/reactjs/express-react-views&#34;&gt;express-react-views&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;This is intended to be used as a replacement for existing server-side view solutions, like &lt;a href=&#34;http://jade-lang.com/&#34;&gt;jade&lt;/a&gt;, &lt;a href=&#34;http://embeddedjs.com/&#34;&gt;ejs&lt;/a&gt;, or &lt;a href=&#34;https://github.com/barc/express-hbs&#34;&gt;handlebars&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install express-coffee-react-views react&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You must explicitly install &lt;code&gt;react&lt;/code&gt; as a dependency. &lt;code&gt;react&lt;/code&gt; is a peer dependency here. This is to avoid issues that may come when using incompatible versions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>React and the annoyances of JSX</title>
      <link>https://blog.mattblair.co/blog/20140909-react-jsx-class-classname-for-htmlfor/</link>
      <pubDate>Tue, 09 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140909-react-jsx-class-classname-for-htmlfor/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been writing a bunch of &lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; code and a heap of &lt;a href=&#34;http://facebook.github.io/react/docs/jsx-in-depth.html&#34;&gt;JSX&lt;/a&gt; at work.&lt;/p&gt;&#xA;&lt;p&gt;React (coupled with &lt;a href=&#34;http://facebook.github.io/flux/docs/overview.html&#34;&gt;Flux&lt;/a&gt;) has been a joy to work with. The uni-directional data flow makes understanding the state of your application at any point easy to understand. The gradual componentization of our UI codebase is a beautiful thing to witness. That, coupled with a component based CSS system (using &lt;a href=&#34;https://bem.info/method/&#34;&gt;BEM&lt;/a&gt; guidelines for naming classes) has removed the messy bleed over we were having with some of our old css code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ember.Data Model Issues</title>
      <link>https://blog.mattblair.co/blog/20140708-ember-data-model-issue-boolean/</link>
      <pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140708-ember-data-model-issue-boolean/</guid>
      <description>&lt;p&gt;I was working with some older Ember.Data code, and I came across a model like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MyFancyModel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;isSelected&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;isSomethingElse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;boolean&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I thought this code was a bit strange, and then went and played with it a bit:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSelected&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSelected&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSelected&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSomethingElse&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSomethingElse&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSomethingElse&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I got identical behavior from the two properties. Then, I tried this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSelected&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isDirty&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//RETURNS FALSE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isSomethingElse&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aFancyModel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isDirty&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//RETURNS TRUE!!!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My question was this: was this the expected behavior? I can&amp;rsquo;t find any documentation on setting boolean values directly on the model like this anywhere in the Ember.Data docs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ember.Data Promise-Aware Properties (Cheaters Edition)</title>
      <link>https://blog.mattblair.co/blog/20140711-ember-data-promise-aware-properties/</link>
      <pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140711-ember-data-promise-aware-properties/</guid>
      <description>&lt;p&gt;I have models like this:&lt;/p&gt;&#xA;&lt;h3 id=&#34;models&#34;&gt;Models&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;belongsTo&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasMany&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;child&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Nursery&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasMany&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;child&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then a controller like this:&lt;/p&gt;&#xA;&lt;p&gt;###Controller&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NurseryController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ember&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Controller&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;uniqueParents&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;mapBy&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;uniq&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }.&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;somethingLikeReliesOnUniqueParents&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }.&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uniqueParents&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;The property somethingLikeReliesOnUniqueParents was never getting unique values. I found two problems here:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;uniq() couldn&amp;rsquo;t figure out uniqueness - much like the problems with &lt;a href=&#34;https://blog.mattblair.co/posts/20140429-ember-filterby-fun&#34;&gt;filter&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The parents promises, once they resolved, weren&amp;rsquo;t updating properties that relied on them.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The first problem I solved the same way I solved in the filter case - filter uniqueness by id, not by object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stuff to mind when writing ES6 code</title>
      <link>https://blog.mattblair.co/blog/20140701-stuff-to-mind-es6/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140701-stuff-to-mind-es6/</guid>
      <description>&lt;p&gt;These are some good tips I picked up browsing the ember and ember.data commits. Nice if you&amp;rsquo;re looking for best practices in writing ES6 code.&lt;/p&gt;&#xA;&lt;p&gt;example: diverging bindings&lt;/p&gt;&#xA;&lt;p&gt;this is an issue when dealing with cycles.&lt;/p&gt;&#xA;&lt;p&gt;bad: (diverges bindings)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;otherFoo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;actually&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needed&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;good:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;otherFoo&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;example: closure compiler dead code remove friendly:&lt;/p&gt;&#xA;&lt;p&gt;bad: closure compile wont drop, bar if foo is used, or foo if bar is used&lt;/p&gt;</description>
    </item>
    <item>
      <title>Post about Songbird on npmawesome</title>
      <link>https://blog.mattblair.co/blog/20140626-post-about-songbird-on-npmawesome/</link>
      <pubDate>Thu, 26 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140626-post-about-songbird-on-npmawesome/</guid>
      <description>&lt;p&gt;The folks at &lt;a href=&#34;npmawesome.com&#34;&gt;npmawesome&lt;/a&gt; wrote a blog post about the &lt;a href=&#34;https://github.com/duereg/songbird&#34;&gt;Songbird&lt;/a&gt;  library I wrote.&lt;/p&gt;&#xA;&lt;p&gt;Songbird is a library that mixes in promise helpers in the Function and Object prototypes on JavaScript. This is a technique that not everybody loves, and I think the author made a great observation about Songbird (and this technique in general).&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;While I think it&amp;rsquo;s a great idea to mix in the promise property to Object and Function, however with great power comes great responsibility. I strongly urge against using songbird in modules that you would distribute on npm because it would have a very big side effect on anyone who dares to install your code. However, when used on a project that isn&amp;rsquo;t made available publicly, songbird would be a great asset.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WriteGooder for Sublime Text</title>
      <link>https://blog.mattblair.co/blog/20140622-sublime-text-write-gooder/</link>
      <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140622-sublime-text-write-gooder/</guid>
      <description>&lt;p&gt;Simple grammar checking for your documentation.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; &lt;a href=&#34;http://github.com/duereg/write-gooder&#34;&gt;write-gooder&lt;/a&gt; and &lt;a href=&#34;http://wbond.net/sublime_packages/package_control/installation&#34;&gt;Sublime Package Control&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mac OS X:&lt;/strong&gt; Installing node with homebrew or macports is assumed. The path to write-gooder is hardcoded in this plugin as &lt;code&gt;/usr/local/share/npm/bin:/usr/local/bin:/opt/local/bin&lt;/code&gt;. You can change the path to the executable in settings.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt; Make sure write-gooder is in your environment path.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Installing node with the Windows Installer from nodejs.org is assumed.&lt;/p&gt;&#xA;&lt;p&gt;##Install write-gooder with npm&lt;/p&gt;&#xA;&lt;p&gt;npm install -g duereg/write-gooder&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ember Model.isDirty - or not</title>
      <link>https://blog.mattblair.co/blog/20140605-ember-model-isdirty-or-not/</link>
      <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140605-ember-model-isdirty-or-not/</guid>
      <description>&lt;p&gt;In Ember, if you have models like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;belongsTo&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;person&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasMany&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then did something like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isDirty&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//return null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isDirty&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That would be the obvious outcome, right?&lt;/p&gt;&#xA;&lt;p&gt;However, if you do this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;thatGuy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;person&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isDirty&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;person&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;person&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;thatGuy&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//set person on tag&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isDirty&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//returns false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because Ember does not check relationships when figuring out isDirty.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emberjs/data/issues/1188&#34;&gt;Here is the issue on github&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ember Data Contributions</title>
      <link>https://blog.mattblair.co/blog/20140518-ember-data-contributor/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140518-ember-data-contributor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/emberjs/data/pulls/duereg?direction=desc&amp;amp;page=1&amp;amp;sort=created&amp;amp;state=closed&#34;&gt;My contributions to Ember.Data!&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Had three pull requests accepted in the last couple of days.&lt;/p&gt;&#xA;&lt;p&gt;Now only if they&amp;rsquo;d release version 1.0 &amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ember Official Contributor!</title>
      <link>https://blog.mattblair.co/blog/20140505-ember-official-contributor/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140505-ember-official-contributor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/emberjs/ember.js/pulls/duereg?direction=desc&amp;amp;page=1&amp;amp;sort=created&amp;amp;state=closed&#34;&gt;Check Out My Contribution to Ember!&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;(Not sexy but I&amp;rsquo;m happy to be helping out.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ember FilterBy Fun</title>
      <link>https://blog.mattblair.co/blog/20140429-ember-filterby-fun/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140429-ember-filterby-fun/</guid>
      <description>&lt;p&gt;If you happen to be writing filterBy statements in Ember against an object, you will want to use this syntax:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;skusForStyle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mergedSkus&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;filterBy&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;style.id&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of this similar looking but exceptionally evil and non-functioning cousin:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;skusForStyle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mergedSkus&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;filterBy&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ember - Test Teardown Error</title>
      <link>https://blog.mattblair.co/blog/20140410-ember-test-teardown-errors/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140410-ember-test-teardown-errors/</guid>
      <description>&lt;h2 id=&#34;cannot-read-property-addobject-of-null&#34;&gt;Cannot read property &amp;lsquo;addObject&amp;rsquo; of null&lt;/h2&gt;&#xA;&lt;p&gt;If you see the following error in Ember.Data 1.0.0-beta.7:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Cannot read property &amp;#39;addObject&amp;#39; of null&#xA;TypeError: Cannot read property &amp;#39;addObject&amp;#39; of null&#xA;    at Ember.ArrayProxy.extend.addRecord&#xA;    at Ember.Object.extend.updateRecordArray&#xA;    at null.&amp;lt;anonymous&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I found this had to do with Test teardown. A monkey patch that solves the issue:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RecordArray&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;reopen&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;addRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;thing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ember&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;thing&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_super&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ember - The content property of DS.PromiseArray should be set before modifying it</title>
      <link>https://blog.mattblair.co/blog/20140408-ember-the-content-property-of-ds-promise-array/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140408-ember-the-content-property-of-ds-promise-array/</guid>
      <description>&lt;h2 id=&#34;the-content-property-of-dspromisearray-should-be-set-before-modifying-it&#34;&gt;The content property of DS.PromiseArray should be set before modifying it&lt;/h2&gt;&#xA;&lt;p&gt;If you see the following error in Ember.Data 1.0.0-beta.7:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;The content property of DS.PromiseArray should be set before modifying it&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;The issue is with changing the contents of an async field.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//program.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;styles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasMany&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Style&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;({});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then used like so:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;program&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;styles&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;pushObject&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That code will throw the exception listed above. To work around this behavior, do the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ember vs Knockout - Property Comparison</title>
      <link>https://blog.mattblair.co/blog/20140320-ember-vs-knockout-property-comparison/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140320-ember-vs-knockout-property-comparison/</guid>
      <description>&lt;h2 id=&#34;a-small-appropriate-comparison&#34;&gt;A small, appropriate comparison&lt;/h2&gt;&#xA;&lt;p&gt;At &lt;a href=&#34;http://modcloth.com&#34;&gt;ModCloth&lt;/a&gt;, I&amp;rsquo;ve been working on an internal application that uses &lt;a href=&#34;http://emberjs.com/&#34;&gt;Ember.js&lt;/a&gt; as its front end framework. In learning Ember I&amp;rsquo;ve noticed some interesting architectural decisions they&amp;rsquo;ve made.&lt;/p&gt;&#xA;&lt;p&gt;This article will concentrate on their Observable Models in comparison with how &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;Knockout&lt;/a&gt; built the same functionality.&lt;/p&gt;&#xA;&lt;p&gt;TANGENT&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://emberjs.com/&#34;&gt;Ember.js&lt;/a&gt; and &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;Knockout&lt;/a&gt; are great contrasts in the library vs framework debate in JS development.&lt;/p&gt;&#xA;&lt;p&gt;Ember is&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;strong&gt;framework&lt;/strong&gt; for creating ambitious web applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Blog!</title>
      <link>https://blog.mattblair.co/blog/20140112-new-blog/</link>
      <pubDate>Sun, 12 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140112-new-blog/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve just ended a very long relationship that was hideously overdue for some closure. That&amp;rsquo;s right - I&amp;rsquo;ve left &lt;a href=&#34;http://codetype.wordpress.com&#34;&gt;wordpress&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a great platform if you can&amp;rsquo;t make a website or just don&amp;rsquo;t care about the details. But it&amp;rsquo;s a little less than I was looking for.&lt;/p&gt;&#xA;&lt;p&gt;So I&amp;rsquo;ve decided to get minorly techy and build a nice static site to hold all my blog entries. A thousand thanks goes to &lt;a href=&#34;https://github.com/dreikanter/wp2md&#34;&gt;@dreikanter&lt;/a&gt; for writing a simple converter of the wordpress XML format to markdown.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A/B Testing and Random Selection</title>
      <link>https://blog.mattblair.co/blog/20131211-a-b-testing-and-random-selection/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20131211-a-b-testing-and-random-selection/</guid>
      <description>&lt;p&gt;Are you looking for an A/B framework? Something you can use in the browser to toggle a user experience - do they see marketing promotion #1, or a picture of a cat?&lt;/p&gt;&#xA;&lt;p&gt;Or are you interested in random selection - you want to send our 5000 emails of differing types, and see how users respond?&lt;/p&gt;&#xA;&lt;p&gt;Either way, enter &lt;a href=&#34;http://www.github.com/goodeggs/laboratory&#34;&gt;laboratory&lt;/a&gt;. A simple framework that allows random selection or A/B testing. With the added bonus of being usable anywhere you can load JavaScript.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Instrumenting Backbone for better error handling</title>
      <link>https://blog.mattblair.co/blog/20131127-instrumenting-backbone-for-better-error-handling/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20131127-instrumenting-backbone-for-better-error-handling/</guid>
      <description>&lt;p&gt;At work we&amp;rsquo;ve been having some issues tracking down some nasty client side bugs. We know they&amp;rsquo;re happening in our &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt; views, but we&amp;rsquo;ve been unable to locate them with any accuracy due to the errors bubbling all the way to the window.onerror handler.&lt;/p&gt;&#xA;&lt;p&gt;Enter &lt;a href=&#34;http://www.github.com/goodeggs/stackbone&#34;&gt;Stackbone&lt;/a&gt;. A simple bit of code to instrument Backbone’s event loops to better locate client side errors.&lt;/p&gt;&#xA;&lt;p&gt;To use:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stackbone&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Backbone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Backbone&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;jQuery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jQuery&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ... log the error ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can either &lt;code&gt;Stackbone = require(‘stackbone’)&lt;/code&gt; or simply include the .js file in a script tag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Source maps in node.js</title>
      <link>https://blog.mattblair.co/blog/20131019-source-maps-in-node-js/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20131019-source-maps-in-node-js/</guid>
      <description>&lt;p&gt;One of the projects I&amp;rsquo;m working on deals with source maps.&lt;/p&gt;&#xA;&lt;p&gt;If you don&amp;rsquo;t know anything about source maps &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&#34;&gt;this link&lt;/a&gt; is a good introduction to what source maps are and why they&amp;rsquo;re useful.&lt;/p&gt;&#xA;&lt;p&gt;Looking at the article date (March 21st, 2012), it&amp;rsquo;s not like source maps are some new hot thing. But the tooling around them is still pretty raw as is their use.&lt;/p&gt;&#xA;&lt;p&gt;So why would you want to use source maps?&lt;/p&gt;</description>
    </item>
    <item>
      <title>My ongoing relation with CoffeeScript - and a gotcha</title>
      <link>https://blog.mattblair.co/blog/20130502-coffeescript-gotcha/</link>
      <pubDate>Thu, 02 May 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20130502-coffeescript-gotcha/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt;, what can I tell ya - I didn&amp;rsquo;t want to love it.&lt;/p&gt;&#xA;&lt;p&gt;I have an unreasonable grudge against significant whitespace.&lt;/p&gt;&#xA;&lt;p&gt;I couldn&amp;rsquo;t figure out the value of a language that compiles to another reasonable language.&lt;/p&gt;&#xA;&lt;p&gt;And don&amp;rsquo;t even get me started on the for of/in thing. I still don&amp;rsquo;t understand that.&lt;/p&gt;&#xA;&lt;p&gt;But the more I use CoffeeScript, the more I love it.&lt;/p&gt;&#xA;&lt;p&gt;The lambdas are probably my biggest love - how can you not love them, in comparison to what JavaScript makes you do?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docco Fork - All JS, all the time</title>
      <link>https://blog.mattblair.co/blog/20130303-docco-fork-all-js-all-the-time/</link>
      <pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20130303-docco-fork-all-js-all-the-time/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;EDIT: My fork is no longer needed. The folks at docco saw the same thing and recently ported over the library to use &lt;a href=&#34;http://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;I love documentation generators for code. You know what I&amp;rsquo;ve talking about to - something which gives you a split screen of the code and the comments, side by side, for easy reading and scrolling. Like &lt;a href=&#34;http://pivotal.github.io/jasmine/&#34;&gt;jasmine&lt;/a&gt; uses for their documentation:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.mattblair.co/images/posts/docco.jpg&#34; alt=&#34;docco&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Since I&amp;rsquo;ve mostly been working in JavaScript lately I&amp;rsquo;ve been looking for something to help document the packages I create easily. In comes &lt;a href=&#34;http://jashkenas.github.io/docco/&#34;&gt;docco&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Esvalidate Library - Standalone Validation Library Using Esprima</title>
      <link>https://blog.mattblair.co/blog/20130215-esvalidate-library-standalone-validation-library-using-esprima/</link>
      <pubDate>Fri, 15 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20130215-esvalidate-library-standalone-validation-library-using-esprima/</guid>
      <description>&lt;p&gt;I spent a good bit of time working on the Esvalidate code that comes with Esprima, trying to get it to work smoothly with my sublime plugin. After submitting a massive pull request to the author of Esprima and our reviewing my code we came to a conclusion - the new code was better served in its own library.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s still in its early stages but please check out the progress I&amp;rsquo;m making here: &lt;a href=&#34;http://www.github.com/esvalidate&#34;&gt;Esvalidate Library&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>.Net Gotcha - Private Classes With Access To Containing Classes&#39;s Protected Variables (Or Not)</title>
      <link>https://blog.mattblair.co/blog/20130115-net-gotcha-private-classes-with-access-to-containing-classess-protected-variables-or-not/</link>
      <pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20130115-net-gotcha-private-classes-with-access-to-containing-classess-protected-variables-or-not/</guid>
      <description>&lt;p&gt;A friend and I were working on some code together when we found an interesting edge case in .Net that neither of us knew about. This is what we knew: if you have a class with a protected field in it, if you declare a private class inside of that class, the private class can access the protected variable. The example below shows what this looks like.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParentClassWithProtectedField&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; protectedField;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateClassInParentClass&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Method(ParentClassWithProtectedField parent) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;&#x9;Console.WriteLine(parent.protectedField); &lt;span style=&#34;color:#75715e&#34;&gt;//Me Work Good!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is what we learned: If you create a child class that inherits from the parent class, and declare another Private class in the child class, you cannot access the parent&amp;rsquo;s protected field from the private class in the child class. I know that was a ton of Parent/Child/Private classes in a short sentence, so here&amp;rsquo;s an example, building on the previous one, of what won&amp;rsquo;t work in .NET.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portfolio Spotlight on Pathbrite = Cool?</title>
      <link>https://blog.mattblair.co/blog/20121204-portfolio-spotlight-on-pathbrite-cool/</link>
      <pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20121204-portfolio-spotlight-on-pathbrite-cool/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently created a &lt;a href=&#34;https://pathbrite.com/portfolio/PBBvoPB0J&#34;&gt;portfolio&lt;/a&gt; on &lt;a href=&#34;https://www.pathbrite.com/&#34;&gt;Pathbrite&lt;/a&gt;. If you haven&amp;rsquo;t heard of Pathbrite, they are a company aiming to:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Collect, organize and share a lifetime of learning and achievement.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;I think this section of their mission statement sums up how they are relevant to working professionals.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;hellip; employers rely on our Pathbrite Portfolio Platform to get a holistic view of candidates, and to better evaluate their readiness for and organizational fit to the opportunity at hand.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Esprima Plugin for Sublime Text</title>
      <link>https://blog.mattblair.co/blog/20121201-esprima-plugin-for-sublime-text/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20121201-esprima-plugin-for-sublime-text/</guid>
      <description>&lt;p&gt;In relation to my previous posts &lt;a href=&#34;https://blog.mattblair.co/posts/20120911-how-to-install-sublime-text-2-on-ubuntu-12-04-unity&#34;&gt;confessing my love for sublime&lt;/a&gt;, and my &lt;a href=&#34;https://blog.mattblair.co/posts/20121120-added-javascript-syntax-checking-via-esprima-and-a-git-pre-commit-hook&#34;&gt;enjoyment of Esprima&lt;/a&gt;, here is some code that showcases both: An Esprima plugin for Sublime Test!&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/duereg/sublime-jsvalidate&#34;&gt;http://github.com/duereg/sublime-jsvalidate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;This has been included in the official list of Sublime Plugins. So you can install this from Sublime using Packages Control.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.mattblair.co/images/posts/esprimaplugin.jpg&#34; alt=&#34;Sublime Text - Esprima Plugin Screenshot&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Added JavaScript syntax checking via Esprima and a Git pre-commit hook</title>
      <link>https://blog.mattblair.co/blog/20121120-added-javascript-syntax-checking-via-esprima-and-a-git-pre-commit-hook/</link>
      <pubDate>Tue, 20 Nov 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20121120-added-javascript-syntax-checking-via-esprima-and-a-git-pre-commit-hook/</guid>
      <description>&lt;p&gt;I came across a brilliant project the other day - &lt;a href=&#34;http://esprima.org/&#34;&gt;Esprima&lt;/a&gt; from &lt;a href=&#34;https://plus.google.com/103266860731871773002/posts&#34;&gt;Ariya Hidayat&lt;/a&gt;, the author of PhantomJS. What is Esprima? Esprima is a JavaScript Parser written in JavaScript Syntax Validator. It forms the basis of several different tools - a minifier, a code coverage tool, a syntax validator - just to name a few. I was immediately interested in the syntax validation tool. It&amp;rsquo;s not a linter - it just checks that the JavaScript written is syntactically correct. Why would you want this if you already have JsHint and JsLint?&lt;/p&gt;</description>
    </item>
    <item>
      <title>.Net SQL Parsing - Using the TSqlParser library</title>
      <link>https://blog.mattblair.co/blog/20121101-net-sql-parsing-using-the-tsqlparser-library/</link>
      <pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20121101-net-sql-parsing-using-the-tsqlparser-library/</guid>
      <description>&lt;p&gt;A preface to this post: it is hard to find a free SQL Parser for .NET. There is a company that has a terrible library that they charge $150 bucks for. There are a couple of incomplete implementations done for school projects or for narrowly focused tasks. So if you want a no-strings attached free parser for SQL, you&amp;rsquo;re out of luck. However, since most people who want a .NET parser are writing code on a Windows machine, and use Visual Studio, there is (lightly documented) hope: the TSqlParser library that ships with Visual Studio.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Free Collection of Microsoft E-Books</title>
      <link>https://blog.mattblair.co/blog/20121030-free-collection-of-microsoft-e-books/</link>
      <pubDate>Tue, 30 Oct 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20121030-free-collection-of-microsoft-e-books/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re a Microsoft Dev, want to learn a bit more about the following products:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SharePoint 2010&lt;/li&gt;&#xA;&lt;li&gt;Sql Server 2012&lt;/li&gt;&#xA;&lt;li&gt;Visual Studio 2010&lt;/li&gt;&#xA;&lt;li&gt;Windows 8&lt;/li&gt;&#xA;&lt;li&gt;Windows Phone 7&lt;/li&gt;&#xA;&lt;li&gt;Office 365&lt;/li&gt;&#xA;&lt;li&gt;Office 2010&lt;/li&gt;&#xA;&lt;li&gt;ASP.NET 4.5 Web Forms&lt;/li&gt;&#xA;&lt;li&gt;ASP.NET MVC 4&lt;/li&gt;&#xA;&lt;li&gt;Microsoft Dynamics CRM 2011 (God Rest Your Soul)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Microsoft has released a bunch of free e-books about these technologies (and more).&lt;/p&gt;&#xA;&lt;p&gt;The links to the e-books:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/mssmallbiz/archive/2012/07/27/large-collection-of-free-microsoft-ebooks-for-you-including-sharepoint-visual-studio-windows-phone-windows-8-office-365-office-2010-sql-server-2012-azure-and-more.aspx&#34;&gt;Microsoft Free E-Books - Page 1&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/mssmallbiz/archive/2012/07/30/another-large-collection-of-free-microsoft-ebooks-and-resource-kits-for-you-including-sharepoint-2013-office-2013-office-365-duet-2-0-azure-cloud-windows-phone-lync-dynamics-crm-and-more.aspx?wa=wsignin1.0&#34;&gt;Microsoft Free E-Books - Page 2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Derby.js - The Ready() Function, and Adding Client-Side Scripts to your App</title>
      <link>https://blog.mattblair.co/blog/20121017-derby-js-the-ready-function-and-client-side-scripts/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20121017-derby-js-the-ready-function-and-client-side-scripts/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve found a neat feature of &lt;a href=&#34;http://derbyjs.com&#34;&gt;derby&lt;/a&gt; dealing with the ready() function. I&amp;rsquo;ve been creating a derby app, and in my application I need to load up a client-side calendar. With a standard HTML web page this is straightforward thing to do. On the page you wanted the calendar, you would include the client js for the calendar, some code to load it, and that would be that. Derby introduced some complexity to this relatively simple task. On my first attempt, I put my scripts in the section of the page that I needed the calendar on. I added a script to load the calendar as well. When I went to the url of the page, it loaded immediately. Success! (I thought).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cracking the Coding Interview - The Tower of Hanoi and Poor Editing</title>
      <link>https://blog.mattblair.co/blog/20120915-cracking-the-coding-interview-the-tower-of-hanoi-and-poor-editing/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120915-cracking-the-coding-interview-the-tower-of-hanoi-and-poor-editing/</guid>
      <description>&lt;p&gt;I just finished the &lt;a href=&#34;http://en.wikipedia.org/wiki/Stack_%5C%28abstract_data_type%5C%29&#34;&gt;Stack&lt;/a&gt; section of &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; and came across an old puzzle - &lt;a href=&#34;http://en.wikipedia.org/wiki/Tower_of_Hanoi&#34;&gt;The Tower of Hanoi&lt;/a&gt;. I struggled with solving this problem. I wrote this elaborate, strange algorithm to try to solve it (which should have been a dead give-away that I had it wrong). Ironically enough, hidden in the 20-30 lines of code I wrote were the three lines of code I needed to solve the problem. Anyways, after beating my head in trying to solve this, I ended up going to the back of the book and looking up the solution. And found this pile of shit psuedocode. I&amp;rsquo;ve shortened the comments, but the content is the same.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cracking the Coding Interview - Linked Lists - The Runner Technique</title>
      <link>https://blog.mattblair.co/blog/20120913-cracking-the-coding-interview-linked-list-the-runner-technique/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120913-cracking-the-coding-interview-linked-list-the-runner-technique/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been going over the &lt;a href=&#34;http://en.wikipedia.org/wiki/Linked_list#Singly.2C_doubly.2C_and_multiply_linked_lists&#34;&gt;Linked List&lt;/a&gt; section of &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; and most times I get stumped with a problem the solution is the Runner Technique (or slow/fast pointers).&lt;/p&gt;&#xA;&lt;p&gt;The idea behind the runner technique is simple; use two pointers that either move at different speeds or are a set distance apart and iterate through a list.&lt;/p&gt;&#xA;&lt;p&gt;Why is this so useful? In some linked list problems you need to know the position of a certain element or the length of the list. Given that you don&amp;rsquo;t always have the length of the list you are working on, the runner technique is an elegant way to solve these type of problems (and in some cases it is the only solution). Here are some examples of linked list problems where the runner technique provides an optimal solution:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to install Sublime Text 2 on Ubuntu 12.04 (Unity)</title>
      <link>https://blog.mattblair.co/blog/20120911-how-to-install-sublime-text-2-on-ubuntu-12-04-unity/</link>
      <pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120911-how-to-install-sublime-text-2-on-ubuntu-12-04-unity/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; has rapidly become my favorite text editor. Cross platform, easy to use, great feature set. The Command Palette feature, where you can search for a feature without having to know where it is in the application, is an piece of usability brilliance. Somebody cobbled together a great step-by-step set of directions on how to install sublime on ubuntu. I wanted to give a shout-out to them and their work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up MongoDB to work with Derby.js</title>
      <link>https://blog.mattblair.co/blog/20120906-setting-up-mongodb-to-work-with-derby-js/</link>
      <pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120906-setting-up-mongodb-to-work-with-derby-js/</guid>
      <description>&lt;p&gt;This post is going to cover installing and configuring MongoDB to use with Derby. If you&amp;rsquo;re reading this post looking to add model persistence to your Derby application but don&amp;rsquo;t know much about MongoDB, understanding MongoDB will help you understand Derby and the model system it uses.&lt;/p&gt;&#xA;&lt;h1 id=&#34;whats-mongodb&#34;&gt;What&amp;rsquo;s MongoDB?&lt;/h1&gt;&#xA;&lt;p&gt;From their website:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;MongoDB (from &amp;ldquo;humongous&amp;rdquo;) is a scalable, high-performance, open source NoSQL database.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve never used &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; before, you should immediately go &lt;a href=&#34;http://try.mongodb.org/&#34;&gt;here&lt;/a&gt;. This is the easiest, fastest way to learn the basics of what mongo is and how it works. And it only takes about fifteen minutes. It&amp;rsquo;s even interactive to keep you from getting bored. Go give it a play.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript Strings - Using Array Accessor &#39;[]&#39; to set characters</title>
      <link>https://blog.mattblair.co/blog/20120905-javascript-strings-using-array-accessor-to-set-characters/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120905-javascript-strings-using-array-accessor-to-set-characters/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been learning quite a bit about JavaScript in writing algorithms from &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt;. I learned something new about strings in JavaScript and how they can be accessed. From &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String#Distinction_between_string_primitives_and_String_objects&#34;&gt;MDN&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Character access There are two ways to access an individual character in a string. The first is the charAt method:&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// returns &amp;#34;a&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cracking the Coding Interview - JavaScript Trie</title>
      <link>https://blog.mattblair.co/blog/20120901-cracking-the-coding-interview-javascript-trie/</link>
      <pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120901-cracking-the-coding-interview-javascript-trie/</guid>
      <description>&lt;p&gt;I finished my third algorithm from &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; - the &lt;a href=&#34;http://en.wikipedia.org/wiki/Trie&#34;&gt;Trie&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Tries are a useful algorithm, if not all that well known. They can be used for efficient spell checking, auto suggestion, as well as the sorting of a collection of strings.&lt;/p&gt;&#xA;&lt;p&gt;This algorithm was more complex to implement than the &lt;a href=&#34;https://blog.mattblair.co/posts/20120824-cracking-the-coding-interview-javascript-singly-linked-list&#34;&gt;Linked List&lt;/a&gt;, but a little simpler than the &lt;a href=&#34;https://blog.mattblair.co/posts/20120829-cracking-the-coding-interview-javascript-minmax-binary-heap&#34;&gt;Max/Min Binary Heap&lt;/a&gt; to implement.&lt;/p&gt;&#xA;&lt;p&gt;The trie&amp;rsquo;s structure is easy to understand - it&amp;rsquo;s a word tree, where each leaf of the tree is a letter of a word. Where words share common prefixes (such as &lt;strong&gt;fre&lt;/strong&gt;sh and &lt;strong&gt;fre&lt;/strong&gt;edom), those words share a common &amp;ldquo;branch&amp;rdquo; of prefix letters, and split where the words differ.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cracking the Coding Interview - JavaScript Min/Max Binary Heap</title>
      <link>https://blog.mattblair.co/blog/20120829-cracking-the-coding-interview-javascript-minmax-binary-heap/</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120829-cracking-the-coding-interview-javascript-minmax-binary-heap/</guid>
      <description>&lt;p&gt;I finished my second algorithm from &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; - the &lt;a href=&#34;http://en.wikipedia.org/wiki/Binary_heap&#34;&gt;Binary Heap&lt;/a&gt;. This algorithm racketed up the complexity from the &lt;a href=&#34;https://blog.mattblair.co/posts/20120824-cracking-the-coding-interview-javascript-singly-linked-list&#34;&gt;Linked List&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The heap&amp;rsquo;s structure is easy to understand - it&amp;rsquo;s a binary tree (a tree where each node can have at most two children). In the case of a max heap, the parents have a greater value than their children. The values in a Max Heap decrease as you move down the tree from the parent to children.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Derby.js - Starting out with Components; Creating a Twitter Bootstrap Input Component</title>
      <link>https://blog.mattblair.co/blog/20120825-derby-js-starting-out-with-components-creating-a-twitter-bootstrap-input-component/</link>
      <pubDate>Sat, 25 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120825-derby-js-starting-out-with-components-creating-a-twitter-bootstrap-input-component/</guid>
      <description>&lt;p&gt;In working with &lt;a href=&#34;http://twitter.github.com/bootstrap/base-css.html#forms&#34;&gt;Twitter Bootstrap Forms&lt;/a&gt;, one of my favorite ways to lay out a form is using the Horizontal form layout. The layout requires a bit of css/html to get each of the form elements (the text boxes and what not) to play nicely. To add form elements to the horizontal form layout, you need the following html structure for each field:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;control-group&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- additional classes here to change state --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;control-label&amp;#34;&lt;/span&gt;&amp;gt;INPUT_LABEL_TEXT_HERE&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;controls&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; /&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- This is the control you want to display --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help-inline&amp;#34;&lt;/span&gt;&amp;gt;ERROR_OR_INFORMATIONAL_MESSAGE_HERE&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s a hefty amount of markup to copy and paste all over your pristine views. Which makes this a great place to use a &lt;a href=&#34;http://derbyjs.com/#components&#34;&gt;Component&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cracking the Coding Interview - JavaScript Singly Linked List</title>
      <link>https://blog.mattblair.co/blog/20120824-cracking-the-coding-interview-javascript-singly-linked-list/</link>
      <pubDate>Fri, 24 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120824-cracking-the-coding-interview-javascript-singly-linked-list/</guid>
      <description>&lt;p&gt;I finished my first algorithm from &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; - the almighty &lt;a href=&#34;http://en.wikipedia.org/wiki/Linked_list#Singly.2C_doubly.2C_and_multiply_linked_lists&#34;&gt;Singly Linked List&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This is the low-hanging fruit of the data structures I mean to tackle. Even implementing this simple structure, I managed to somehow squeeze in a bug that luckily I caught in my testing. An unfortunate case of premature optimization.&lt;/p&gt;&#xA;&lt;p&gt;The code doesn&amp;rsquo;t look as cool as it did, but at least it does the job. One thing I found in reading a bit about Linked Lists on wikipedia, which I had never heard of before; Hash Linking.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Derby.js - Integrating Twitter Bootstrap into your Application</title>
      <link>https://blog.mattblair.co/blog/20120818-derby-js-integrating-twitter-bootstrap-into-your-application/</link>
      <pubDate>Sat, 18 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120818-derby-js-integrating-twitter-bootstrap-into-your-application/</guid>
      <description>&lt;p&gt;As I&amp;rsquo;ve mentioned in a &lt;a href=&#34;https://blog.mattblair.co/posts/20120504-why-use-twitter-bootstrap&#34;&gt;previous post&lt;/a&gt;, I&amp;rsquo;m a big fan of Twitter Bootstrap. Lately I&amp;rsquo;ve been playing been with JavaScript and &lt;a href=&#34;http://www.derbyjs.com&#34;&gt;Derby&lt;/a&gt;. I want to integrate bootstrap with the POC site I&amp;rsquo;m building, and the creators of Derby have already figured out a way to do this.&lt;/p&gt;&#xA;&lt;p&gt;Step 1: Add a dependency to the &lt;a href=&#34;https://github.com/codeparty/derby-ui-boot/&#34;&gt;derby-ui-boot&lt;/a&gt; package, which is a Derby component library based on Twitter Bootstrap.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;....&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;derby&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;derby-ui-boot&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.0.0beta4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gzippo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;=0.1.7&amp;#34;&lt;/span&gt; }, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;....&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Step 2: Update your project with the downloaded ui-boot code This is as simple as running &lt;code&gt;npm update&lt;/code&gt; in your project folder, which will read package.json, and download any missing dependencies (like the derby-ui-boot entry you just added).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cracking the Coding Interview: JavaScript Data Structures</title>
      <link>https://blog.mattblair.co/blog/20120817-cracking-the-coding-interview-javascript-data-structures/</link>
      <pubDate>Fri, 17 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120817-cracking-the-coding-interview-javascript-data-structures/</guid>
      <description>&lt;p&gt;A friend and co-worker of mine (one of the best and brightest I&amp;rsquo;ve worked with) recently left our company to go work for Microsoft. Having gone through the Microsoft interview process myself (hilariously unprepared, to the enjoyment of my interviewer), I wondered what he had done to get ready for the process. He recommended one book - &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=aplfopoex-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt; - which he said had been recommended to him as the bible for preparation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Derby.js - Working with Views, Models, and Bindings</title>
      <link>https://blog.mattblair.co/blog/20120807-derby-js-working-with-view-templates-models-and-bindings/</link>
      <pubDate>Tue, 07 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120807-derby-js-working-with-view-templates-models-and-bindings/</guid>
      <description>&lt;p&gt;In my previous &lt;a href=&#34;https://blog.mattblair.co/posts/20120722-derby-js-playing-with-models&#34;&gt;post&lt;/a&gt; about &lt;a href=&#34;http://derbyjs.com/&#34;&gt;derby&lt;/a&gt;, I talked a bit about how to create a model in derby and one rule you need to follow when creating models (the first two path segments should be an object).&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m creating a test application to help me learn derby &lt;a href=&#34;http://github.com/duereg/Potluck&#34;&gt;here&lt;/a&gt;. In the process of doing absolutely everything wrong to start I&amp;rsquo;ve learned a bit about how Derby binds to models. Let&amp;rsquo;s say you&amp;rsquo;re got some markup like this that you&amp;rsquo;d like to bind to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTML5 &#39;formaction&#39; attribute - An easy Modernizr test</title>
      <link>https://blog.mattblair.co/blog/20120801-html-input-formaction-attribute-an-easy-modernizr-test/</link>
      <pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120801-html-input-formaction-attribute-an-easy-modernizr-test/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;EDIT NOTE: This no longer needs to be done outside of Modernizr. This was added to the Modernizr package about a month ago. &lt;a href=&#34;https://github.com/Modernizr/Modernizr/issues/1067&#34;&gt;Link to issue&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been writing some Html Forms, and in playing with submit buttons came across an interesting attribute in the HTML 5 specs: formaction. The definition, from &lt;a href=&#34;http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#attr-fs-formaction&#34;&gt;HTML Living Standard Doc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The action and formaction content attributes, if specified, must have a value that is a valid non-empty URL potentially surrounded by spaces. The action of an element is the value of the element&amp;rsquo;s formaction attribute, if the element is a submit button and has such an attribute, or the value of its form owner&amp;rsquo;s action attribute, if it has one, or else the empty string.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Australian vs US Coffee Terms Comparison</title>
      <link>https://blog.mattblair.co/blog/20120727-australian-vs-us-coffee-terms-comparison/</link>
      <pubDate>Fri, 27 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120727-australian-vs-us-coffee-terms-comparison/</guid>
      <description>&lt;p&gt;This took me a while to figure out when I first moved to Australia. I still remember the look on the barista&amp;rsquo;s face when I tried to order an Americano, and then the absolute puzzlement over what the hell a flat white vs a long black was. I hope this helps other visitors to Australia from the US order a decent cup of coffee!&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Description&lt;/th&gt;&#xA;          &lt;th&gt;Australian Name&lt;/th&gt;&#xA;          &lt;th&gt;US Name&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso.&lt;/td&gt;&#xA;          &lt;td&gt;Short Black&lt;/td&gt;&#xA;          &lt;td&gt;Espresso&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso mixed with hot water.&lt;/td&gt;&#xA;          &lt;td&gt;Long Black&lt;/td&gt;&#xA;          &lt;td&gt;Americano&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso topped with milk froth.&lt;/td&gt;&#xA;          &lt;td&gt;Macchiato&lt;/td&gt;&#xA;          &lt;td&gt;-&amp;ndash;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A cup of hot milk with a shot of expresso poured in.&lt;/td&gt;&#xA;          &lt;td&gt;-&amp;ndash;&lt;/td&gt;&#xA;          &lt;td&gt;Macchiato&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso with steamed milk.&lt;/td&gt;&#xA;          &lt;td&gt;Flat White&lt;/td&gt;&#xA;          &lt;td&gt;Latte No Foam&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso with steamed milk and a little milk froth.&lt;/td&gt;&#xA;          &lt;td&gt;Latte&lt;/td&gt;&#xA;          &lt;td&gt;Latte&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso with steamed milk, milk froth, and cocoa powder.&lt;/td&gt;&#xA;          &lt;td&gt;Mocha&lt;/td&gt;&#xA;          &lt;td&gt;Mocha&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso with half steamed milk, half milk froth.&lt;/td&gt;&#xA;          &lt;td&gt;Cappuccino&lt;/td&gt;&#xA;          &lt;td&gt;Cappuccino&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A shot of espresso with cold milk and ice cream.&lt;/td&gt;&#xA;          &lt;td&gt;Iced Coffee&lt;/td&gt;&#xA;          &lt;td&gt;-&amp;ndash;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A cup of drip coffee over ice.&lt;/td&gt;&#xA;          &lt;td&gt;-&amp;ndash;&lt;/td&gt;&#xA;          &lt;td&gt;Iced Coffee&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Derby.js - Playing with Models</title>
      <link>https://blog.mattblair.co/blog/20120722-derby-js-playing-with-models/</link>
      <pubDate>Sun, 22 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120722-derby-js-playing-with-models/</guid>
      <description>&lt;p&gt;Been playing around with &lt;a href=&#34;http://derbyjs.com&#34;&gt;Derby&lt;/a&gt; in my spare time. The idea behind the platform is smart - using node and express, you write one set of code, and that code automatically syncs data between browsers, servers, and a database.&lt;/p&gt;&#xA;&lt;p&gt;Derby is still raw. The documentation is comprehensive but puts important information about the same topic in different places.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve culled the following eight lines of documentation of defining models from the documentation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some node.js and express.js beginner help</title>
      <link>https://blog.mattblair.co/blog/20120710-some-node-js-and-express-js-beginner-help/</link>
      <pubDate>Tue, 10 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120710-some-node-js-and-express-js-beginner-help/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve just started using &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; with &lt;a href=&#34;http://expressjs.com&#34;&gt;express.js&lt;/a&gt; on both Windows (with iisnode) and Ubuntu.&lt;/p&gt;&#xA;&lt;p&gt;I love the stack (one programming language from front to back!), but some of the documentation has been frustrating for me. I wanted to document what I&amp;rsquo;ve learned so far in the hopes that it&amp;rsquo;ll help someone else down the line.&lt;/p&gt;&#xA;&lt;h2 id=&#34;generate-the-starter-app&#34;&gt;Generate the starter app&lt;/h2&gt;&#xA;&lt;p&gt;At first, I wanted to just hack away some of the existing example apps that were out there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using StructureMap to collect and use all instances of a given type</title>
      <link>https://blog.mattblair.co/blog/20120618-using-structuremap-to-collect-and-use-all-instances-of-a-given-type/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120618-using-structuremap-to-collect-and-use-all-instances-of-a-given-type/</guid>
      <description>&lt;p&gt;Had an issue at work where I wanted to store my rules and handlers for a class outside of the class definition, so I could better test the component. Found an easy way to add all your rules into &lt;a href=&#34;http://docs.structuremap.net/&#34;&gt;StructureMap&lt;/a&gt;, and then retrieve those rules as a list via constructor injection.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Linq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; StructureMap;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; StructureMap.Configuration.DSL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TravelRegistry&lt;/span&gt; : Registry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TravelRegistry()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITransportHandler&amp;gt;().Add&amp;lt;ApprovedAccommodationHandler&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITransportHandler&amp;gt;().Add&amp;lt;ApprovedCharterFlightHandler&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITransportHandler&amp;gt;().Add&amp;lt;ApprovedCommercialFlightHandler&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITransportHandler&amp;gt;().Add&amp;lt;ApprovedGroundTransportHandler&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;IEnumerable&amp;lt;ITransportHandler&amp;gt;&amp;gt;().Use(x =&amp;gt; x.GetAllInstances&amp;lt;ITransportHandler&amp;gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITravelRule&amp;gt;().Add&amp;lt;StartLessThanEndRule&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITravelRule&amp;gt;().Add&amp;lt;CurrentEndsAfterPreviousRule&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITravelRule&amp;gt;().Add&amp;lt;CurrentStartAfterPreviousEndRule&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITravelRule&amp;gt;().Add&amp;lt;UniqueEndsRule&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITravelRule&amp;gt;().Add&amp;lt;UniqueStartAndEndRule&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;ITravelRule&amp;gt;().Add&amp;lt;UniqueStartsRule&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        For&amp;lt;IEnumerable&amp;lt;ITravelRule&amp;gt;&amp;gt;().Use(x =&amp;gt; x.GetAllInstances&amp;lt;ITravelRule&amp;gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Why use Twitter Bootstrap?</title>
      <link>https://blog.mattblair.co/blog/20120504-why-use-twitter-bootstrap/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120504-why-use-twitter-bootstrap/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a fan of &lt;a href=&#34;http://twitter.github.com/bootstrap/&#34;&gt;Twitter Bootstrap&lt;/a&gt;, the simple and flexible CSS, HTML, and JavaScript user interface framework.&lt;/p&gt;&#xA;&lt;p&gt;What&amp;rsquo;s not to like? Out of the box, you&amp;rsquo;ll get:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cross-Platform Support&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;IE 7 to IPhone and everything else (sorry IE6)&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;12-Column Grid&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;A good grid system takes most of the pain out of laying out your site. Getting labels, inputs, and other pieces of your ui to layout consistently across different browsers at different resolutions can be one of the most painful parts of web development.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Posting an IEnumerable of Interfaces back from your Views by extending the DefaultModelBinder</title>
      <link>https://blog.mattblair.co/blog/20120426-posting-an-ienumerable-of-interfaces-back-from-your-views-by-extending-the-defaultmodelbinder/</link>
      <pubDate>Thu, 26 Apr 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120426-posting-an-ienumerable-of-interfaces-back-from-your-views-by-extending-the-defaultmodelbinder/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Please note I came across a bug in the code, and revised this post on 31/07/2012.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Came across an interesting problem today. In ASP.Net MVC, you can easily pass an enumerable of interfaces to your views from your controllers. As long as you have &lt;code&gt;DisplayTemplates&lt;/code&gt; and &lt;code&gt;EditorTemplates&lt;/code&gt; defined for the subclasses, then those classes will be rendered correctly from your enumerable of the parent interfaces.&lt;/p&gt;&#xA;&lt;p&gt;However, if you then POST to a controller method that accepts an &lt;code&gt;IEnumerable&lt;/code&gt;, you&amp;rsquo;ll get the error message:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Horrible, Slow, Stupid, Scary Build Process</title>
      <link>https://blog.mattblair.co/blog/20120303-horrible-slow-stupid-scary-build-process/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120303-horrible-slow-stupid-scary-build-process/</guid>
      <description>&lt;p&gt;So we&amp;rsquo;ve rolled out a new build process at work. I&amp;rsquo;ve started working with a new company, and when I arrived, the build process for a new environment consisted of a 20 page manual somebody had written. The process of putting a build on an environment was slow, the manual had steps missing that everyone just &amp;lsquo;knew&amp;rsquo;, the process had multiple failure points, and was more or less a complete disaster. Every other release to PRODUCTION would have some release process error that would force devs to spend all night at work on release night, sometimes having to come in during the weekend as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows 7 - Problem Steps Recorder</title>
      <link>https://blog.mattblair.co/blog/20120216-windows-7-problem-steps-recorder/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20120216-windows-7-problem-steps-recorder/</guid>
      <description>&lt;p&gt;Just found out about a good tool that ships with Windows 7.&lt;/p&gt;&#xA;&lt;p&gt;One of the hardest things about debugging software can be getting the users to document what went wrong so you can test the scenario. Problem Steps Recorder - which ships with Windows 7 - records a user&amp;rsquo;s actions and documents them in an easy to understand format. It even gives the user the option of sending the recording via e-mail right from the program.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up a .NET build server WITHOUT installing Visual Studio</title>
      <link>https://blog.mattblair.co/blog/20111031-setting-up-a-net-build-server-without-installing-visual-studio/</link>
      <pubDate>Mon, 31 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20111031-setting-up-a-net-build-server-without-installing-visual-studio/</guid>
      <description>&lt;p&gt;My client tasked me with upgrading their build server. Today, their platform builds VS 2080 solutions in .NET 3.5 - and I&amp;rsquo;ve been pushing to upgrade everyone to Visual Studio (VS) 2010 and eventually .NET 4.0. I want to upgrade the server to build a VS 2010 solution in .NET 3.5.&lt;/p&gt;&#xA;&lt;p&gt;This will allow everyone to upgrade to VS 2010 while leaving the task of upgrading the production web servers to another day. I tried the easy approach. I install .NET 4.0 on the build server and run the MSBuild scripts that already exist. Nothing good happens.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enable/Disable jQuery buttons in Knockout with a Custom Binding Handler</title>
      <link>https://blog.mattblair.co/blog/20111021-enabledisable-jquery-buttons-in-knockout-with-a-custom-binding-handler/</link>
      <pubDate>Fri, 21 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20111021-enabledisable-jquery-buttons-in-knockout-with-a-custom-binding-handler/</guid>
      <description>&lt;p&gt;Still working on those jQuery buttons. Trying to update old ASP.Net Webforms using jQuery, Knockout, and Amplify.&lt;/p&gt;&#xA;&lt;p&gt;New problem today.&lt;/p&gt;&#xA;&lt;p&gt;I was having problems getting Knockout to enable/disable my jQuery buttons using the Knockout &amp;rsquo;enable&amp;rsquo; bindingHandler. It would enable/disable the underlying element that I had run the .button() method on, but it had no idea about the div that jQuery had wrapped my element in, or how to handle it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auto Creation of jQuery Buttons using Knockout Templates</title>
      <link>https://blog.mattblair.co/blog/20111019-auto-creation-of-jquery-buttons-using-knockout-templates/</link>
      <pubDate>Wed, 19 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20111019-auto-creation-of-jquery-buttons-using-knockout-templates/</guid>
      <description>&lt;p&gt;While converting ASP.NET Webforms to be more clienty using HTML 5, Knockout, and jQuery, I came across a problem.&lt;/p&gt;&#xA;&lt;p&gt;I want to use jQuery buttons on my Knockout-rendered rows, but whenever a new row gets added via a template, the buttons were not created as jQuery buttons. The issue was that I was calling a method to create the buttons after the page was fully rendered but never again. All the new rows wouldn&amp;rsquo;t have the .button method run on them, and thus no sparkly jQuery buttons.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Alas, it was not to be</title>
      <link>https://blog.mattblair.co/blog/20111014-alas-it-was-not-to-be/</link>
      <pubDate>Fri, 14 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20111014-alas-it-was-not-to-be/</guid>
      <description>&lt;p&gt;My jQuery bug was already documented. :(&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finished the Nike&#43; Importer for www.runningahead.com</title>
      <link>https://blog.mattblair.co/blog/20111010-finished-the-nike-importer-for-www-runningahead-com/</link>
      <pubDate>Mon, 10 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20111010-finished-the-nike-importer-for-www-runningahead-com/</guid>
      <description>&lt;p&gt;I finished up the Nike+ data importer for &lt;a href=&#34;https://www.runningahead.com&#34;&gt;www.runningahead.com&lt;/a&gt;. You can check out the code for the importer at this Github repository:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/duereg/NikePlusImporter&#34;&gt;https://github.com/duereg/NikePlusImporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I got a small test project up for this. It walks through everything but doesn&amp;rsquo;t Mock up the calls to the Nike+ service (I couldn&amp;rsquo;t be bothered). Let me know what you think.&lt;/p&gt;</description>
    </item>
    <item>
      <title>jQuery UI Bug - 1.8.16, buttonset() method</title>
      <link>https://blog.mattblair.co/blog/20111006-jquery-ui-bug-1-8-16-buttonset-method/</link>
      <pubDate>Thu, 06 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20111006-jquery-ui-bug-1-8-16-buttonset-method/</guid>
      <description>&lt;p&gt;I love to find bugs in good software! Came across a little jQuery UI bug today. It&amp;rsquo;s for one browser, but it always excited to be able to create an easy-to-replicate bug. The bug is small - it deals with the buttonset() method.&lt;/p&gt;&#xA;&lt;p&gt;The buttons, instead of having the rounded corners on the outside, have the rounded corners on the inside. Not critical but it made the UI I was working on look strange. If you have Chrome, and are dealing with jQuery 1.6.3 and jQuery UI 1.8.16, check out the bug here:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beautiful LINQ to Xml</title>
      <link>https://blog.mattblair.co/blog/20110924-beautiful-linq-to-xml/</link>
      <pubDate>Sat, 24 Sep 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20110924-beautiful-linq-to-xml/</guid>
      <description>&lt;p&gt;Is there anything better in life than finding a better way to do something? An easier commute, a better night&amp;rsquo;s sleep, a tastier cake recipe? In starting the Nike+ importer for &lt;a href=&#34;https://www.runningahead.com&#34;&gt;www.runningahead.com&lt;/a&gt;, I knew I was going to have to deal with a bit of XML. Which used to mean XPath. Not so much anymore. LINQ to XML, you rock my world. It turns XML like this&amp;hellip;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extendedDataList&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extendedData&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dataType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distance&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalUnit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalValue=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;0.0, 0.0372, 0.0705, 0.1041, ....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extendedData&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extendedData&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dataType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;speed&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalUnit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalValue=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;0.0, 13.3866, 12.6856, 12.4970, ....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extendedData&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extendedData&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dataType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heartRate&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalUnit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intervalValue=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;0, 88, 108, 115, ....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extendedData&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extendedDataList&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With a little bit of code like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working on Nike&#43; Importer for RunningAhead.com</title>
      <link>https://blog.mattblair.co/blog/20110921-working-on-nike-importer-for-runningahead-com/</link>
      <pubDate>Wed, 21 Sep 2011 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20110921-working-on-nike-importer-for-runningahead-com/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a fan of the website &lt;a href=&#34;http://www.runningahead.com&#34;&gt;www.runningahead.com&lt;/a&gt;. I use it to track all my sporting life activities. The primary reason I use this site, instead of one of the hundreds like it, is that you can track anything - yoga, rowing, running, P-90x, underwater hockey, tiddlywinks, whatever. Throw in some customizable reporting and some great hardware integration, and it&amp;rsquo;s free, and you&amp;rsquo;ve got a winner.&lt;/p&gt;&#xA;&lt;p&gt;That doesn&amp;rsquo;t mean there aren&amp;rsquo;t things I don&amp;rsquo;t like about the site, and things I wish could be better. But since it&amp;rsquo;s a free site, I&amp;rsquo;d like to help out and make the site better. I&amp;rsquo;ve talked to the site&amp;rsquo;s creator (Eric Yee) and volunteered to help craft some plugins for the site for him.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://blog.mattblair.co/blog/20140209-introducing-songbird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.mattblair.co/blog/20140209-introducing-songbird/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;title = &amp;#34;Introducing Songbird&amp;#34;&#xA;description = &amp;#34;How to have promises everywhere, all the time&amp;#34;&#xA;date = 2014-02-09&#xA;post_name = &amp;#34;introducing-songbird&amp;#34;&#xA;status = &amp;#34;publish&amp;#34;&#xA;tags = [&amp;#34;development&amp;#34;,&amp;#34;software&amp;#34;,&amp;#34;coding&amp;#34;,&amp;#34;web&amp;#34;,&amp;#34;html&amp;#34;,&amp;#34;JavaScript&amp;#34;,&amp;#34;CoffeeScript&amp;#34;,&amp;#34;EMCAScript&amp;#34;,&amp;#34;Songbird&amp;#34;,&amp;#34;Bluebird&amp;#34;,&amp;#34;Promises&amp;#34;,&amp;#34;Generators&amp;#34;,&amp;#34;EMCAScript&amp;#34;]&#xA;categories = [&amp;#34;engineering&amp;#34;, &amp;#34;technical&amp;#34;, &amp;#34;javascript&amp;#34;]&#xA;layout = &amp;#34;post&amp;#34;&#xA;+++&#xA;&#xA;Would you rather write this:&#xA;&#xA;```javascript&#xA;var updateUser = function(id, attributes, callback) {&#xA;  User.findOne(id, function (err, user) {&#xA;    if (err) return callback(err);&#xA;&#xA;    user.set(attributes);&#xA;    user.save(function(err, updated) {&#xA;      if (err) return callback(err);&#xA;&#xA;      console.log(&amp;#34;Updated&amp;#34;, updated);&#xA;      callback(null, updated);&#xA;    });&#xA;  });&#xA;});&#xA;+++&#xA;&#xA;Or this:&#xA;&#xA;```coffeescript&#xA;  User.promise.findOne(id).then( (user) →&#xA;    user.set(attributes)&#xA;    user.promise.save()&#xA;  ).then (user) -&amp;gt; console.log(&amp;#34;Updated&amp;#34;, user)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.github.com/duereg/songbird&#34;&gt;Songbird&lt;/a&gt; allows you to easily mix asynchronous and synchronous programming styles in node.js.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
